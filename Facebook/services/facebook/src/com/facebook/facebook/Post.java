/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Post generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`post`")
public class Post implements Serializable {

    private Integer id;
    private int fromUserId;
    private Integer withUserId;
    private Integer postTypeId;
    private String post;
    private Timestamp createdAt;
    private String postContent;
    private int likes = 0;
    private Users usersByFromUserId;
    private Users usersByWithUserId;
    private PostType postType;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`from_user_id`", nullable = false, scale = 0, precision = 10)
    public int getFromUserId() {
        return this.fromUserId;
    }

    public void setFromUserId(int fromUserId) {
        this.fromUserId = fromUserId;
    }

    @Column(name = "`with_user_id`", nullable = true, scale = 0, precision = 10)
    public Integer getWithUserId() {
        return this.withUserId;
    }

    public void setWithUserId(Integer withUserId) {
        this.withUserId = withUserId;
    }

    @Column(name = "`post_type_id`", nullable = true, scale = 0, precision = 10)
    public Integer getPostTypeId() {
        return this.postTypeId;
    }

    public void setPostTypeId(Integer postTypeId) {
        this.postTypeId = postTypeId;
    }

    @Column(name = "`post`", nullable = true, length = 2048)
    public String getPost() {
        return this.post;
    }

    public void setPost(String post) {
        this.post = post;
    }

    @Column(name = "`created_at`", nullable = true)
    public Timestamp getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Timestamp createdAt) {
        this.createdAt = createdAt;
    }

    @Column(name = "`post_content`", nullable = true, length = 100)
    public String getPostContent() {
        return this.postContent;
    }

    public void setPostContent(String postContent) {
        this.postContent = postContent;
    }

    @Column(name = "`likes`", nullable = false, scale = 0, precision = 10)
    public int getLikes() {
        return this.likes;
    }

    public void setLikes(int likes) {
        this.likes = likes;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`from_user_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`post_ibfk_1`"))
    @Fetch(FetchMode.JOIN)
    public Users getUsersByFromUserId() {
        return this.usersByFromUserId;
    }

    public void setUsersByFromUserId(Users usersByFromUserId) {
        if(usersByFromUserId != null) {
            this.fromUserId = usersByFromUserId.getId();
        }

        this.usersByFromUserId = usersByFromUserId;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`with_user_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`post_ibfk_2`"))
    @Fetch(FetchMode.JOIN)
    public Users getUsersByWithUserId() {
        return this.usersByWithUserId;
    }

    public void setUsersByWithUserId(Users usersByWithUserId) {
        if(usersByWithUserId != null) {
            this.withUserId = usersByWithUserId.getId();
        }

        this.usersByWithUserId = usersByWithUserId;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`post_type_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`post_ibfk_3`"))
    @Fetch(FetchMode.JOIN)
    public PostType getPostType() {
        return this.postType;
    }

    public void setPostType(PostType postType) {
        if(postType != null) {
            this.postTypeId = postType.getId();
        }

        this.postType = postType;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Post)) return false;
        final Post postInstance = (Post) o;
        return Objects.equals(getId(), postInstance.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}