/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Friend generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`friend`", uniqueConstraints = {
            @UniqueConstraint(name = "`unique_friends`", columnNames = {"`user1_id`", "`user2_id`"})})
public class Friend implements Serializable {

    private Integer id;
    private int user1Id;
    private int user2Id;
    private String status = "pending";
    private Timestamp requestedAt;
    private Users usersByUser1Id;
    private Users usersByUser2Id;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`user1_id`", nullable = false, scale = 0, precision = 10)
    public int getUser1Id() {
        return this.user1Id;
    }

    public void setUser1Id(int user1Id) {
        this.user1Id = user1Id;
    }

    @Column(name = "`user2_id`", nullable = false, scale = 0, precision = 10)
    public int getUser2Id() {
        return this.user2Id;
    }

    public void setUser2Id(int user2Id) {
        this.user2Id = user2Id;
    }

    @Column(name = "`status`", nullable = false, length = 8)
    public String getStatus() {
        return this.status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    @Column(name = "`requested_at`", nullable = false)
    public Timestamp getRequestedAt() {
        return this.requestedAt;
    }

    public void setRequestedAt(Timestamp requestedAt) {
        this.requestedAt = requestedAt;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`user1_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`friend_ibfk_1`"))
    @Fetch(FetchMode.JOIN)
    public Users getUsersByUser1Id() {
        return this.usersByUser1Id;
    }

    public void setUsersByUser1Id(Users usersByUser1Id) {
        if(usersByUser1Id != null) {
            this.user1Id = usersByUser1Id.getId();
        }

        this.usersByUser1Id = usersByUser1Id;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`user2_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`friend_ibfk_2`"))
    @Fetch(FetchMode.JOIN)
    public Users getUsersByUser2Id() {
        return this.usersByUser2Id;
    }

    public void setUsersByUser2Id(Users usersByUser2Id) {
        if(usersByUser2Id != null) {
            this.user2Id = usersByUser2Id.getId();
        }

        this.usersByUser2Id = usersByUser2Id;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Friend)) return false;
        final Friend friend = (Friend) o;
        return Objects.equals(getId(), friend.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}