/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Messages generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`messages`")
public class Messages implements Serializable {

    private Integer id;
    private int senderId;
    private int receiverId;
    private String messageContent;
    private boolean isRead;
    private Integer chatId;
    private Timestamp createdAt;
    private Users usersBySenderId;
    private Users usersByReceiverId;
    private Chat chat;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`sender_id`", nullable = false, scale = 0, precision = 10)
    public int getSenderId() {
        return this.senderId;
    }

    public void setSenderId(int senderId) {
        this.senderId = senderId;
    }

    @Column(name = "`receiver_id`", nullable = false, scale = 0, precision = 10)
    public int getReceiverId() {
        return this.receiverId;
    }

    public void setReceiverId(int receiverId) {
        this.receiverId = receiverId;
    }

    @Column(name = "`message_content`", nullable = false, length = 65535)
    public String getMessageContent() {
        return this.messageContent;
    }

    public void setMessageContent(String messageContent) {
        this.messageContent = messageContent;
    }

    @Column(name = "`is_read`", nullable = false)
    public boolean isIsRead() {
        return this.isRead;
    }

    public void setIsRead(boolean isRead) {
        this.isRead = isRead;
    }

    @Column(name = "`chat_id`", nullable = true, scale = 0, precision = 10)
    public Integer getChatId() {
        return this.chatId;
    }

    public void setChatId(Integer chatId) {
        this.chatId = chatId;
    }

    @Column(name = "`created_at`", nullable = false)
    public Timestamp getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Timestamp createdAt) {
        this.createdAt = createdAt;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`sender_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`messages_ibfk_1`"))
    @Fetch(FetchMode.JOIN)
    public Users getUsersBySenderId() {
        return this.usersBySenderId;
    }

    public void setUsersBySenderId(Users usersBySenderId) {
        if(usersBySenderId != null) {
            this.senderId = usersBySenderId.getId();
        }

        this.usersBySenderId = usersBySenderId;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`receiver_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`messages_ibfk_2`"))
    @Fetch(FetchMode.JOIN)
    public Users getUsersByReceiverId() {
        return this.usersByReceiverId;
    }

    public void setUsersByReceiverId(Users usersByReceiverId) {
        if(usersByReceiverId != null) {
            this.receiverId = usersByReceiverId.getId();
        }

        this.usersByReceiverId = usersByReceiverId;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`chat_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`messages_ibfk_3`"))
    @Fetch(FetchMode.JOIN)
    public Chat getChat() {
        return this.chat;
    }

    public void setChat(Chat chat) {
        if(chat != null) {
            this.chatId = chat.getId();
        }

        this.chat = chat;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Messages)) return false;
        final Messages messages = (Messages) o;
        return Objects.equals(getId(), messages.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}