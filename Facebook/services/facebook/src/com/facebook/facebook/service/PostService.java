/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.Comment;
import com.facebook.facebook.LikedPost;
import com.facebook.facebook.Post;
import com.facebook.facebook.SavedPost;

/**
 * Service object for domain model class {@link Post}.
 */
public interface PostService {

    /**
     * Creates a new Post. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Post if any.
     *
     * @param postInstance Details of the Post to be created; value cannot be null.
     * @return The newly created Post.
     */
    Post create(@Valid Post postInstance);


	/**
     * Returns Post by given id if exists.
     *
     * @param postId The id of the Post to get; value cannot be null.
     * @return Post associated with the given postId.
	 * @throws EntityNotFoundException If no Post is found.
     */
    Post getById(Integer postId);

    /**
     * Find and return the Post by given id if exists, returns null otherwise.
     *
     * @param postId The id of the Post to get; value cannot be null.
     * @return Post associated with the given postId.
     */
    Post findById(Integer postId);

	/**
     * Find and return the list of Posts by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param postIds The id's of the Post to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Posts associated with the given postIds.
     */
    List<Post> findByMultipleIds(List<Integer> postIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Post. It replaces all fields of the existing Post with the given postInstance.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Post if any.
     *
     * @param postInstance The details of the Post to be updated; value cannot be null.
     * @return The updated Post.
     * @throws EntityNotFoundException if no Post is found with given input.
     */
    Post update(@Valid Post postInstance);


    /**
     * Partially updates the details of an existing Post. It updates only the
     * fields of the existing Post which are passed in the postInstancePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Post if any.
     *
     * @param postId The id of the Post to be deleted; value cannot be null.
     * @param postInstancePatch The partial data of Post which is supposed to be updated; value cannot be null.
     * @return The updated Post.
     * @throws EntityNotFoundException if no Post is found with given input.
     */
    Post partialUpdate(Integer postId, Map<String, Object> postInstancePatch);

    /**
     * Deletes an existing Post with the given id.
     *
     * @param postId The id of the Post to be deleted; value cannot be null.
     * @return The deleted Post.
     * @throws EntityNotFoundException if no Post found with the given id.
     */
    Post delete(Integer postId);

    /**
     * Deletes an existing Post with the given object.
     *
     * @param postInstance The instance of the Post to be deleted; value cannot be null.
     */
    void delete(Post postInstance);

    /**
     * Find all Posts matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Posts.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Post> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Posts matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Posts.
     *
     * @see Pageable
     * @see Page
     */
    Page<Post> findAll(String query, Pageable pageable);

    /**
     * Exports all Posts matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Posts matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Posts in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Post.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated comments for given Post id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Comment instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Comment> findAssociatedComments(Integer id, Pageable pageable);

    /*
     * Returns the associated likedPosts for given Post id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated LikedPost instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<LikedPost> findAssociatedLikedPosts(Integer id, Pageable pageable);

    /*
     * Returns the associated savedPosts for given Post id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated SavedPost instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<SavedPost> findAssociatedSavedPosts(Integer id, Pageable pageable);

}