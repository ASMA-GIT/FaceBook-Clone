/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.Family;
import com.facebook.facebook.Relation;


/**
 * ServiceImpl object for domain model class Relation.
 *
 * @see Relation
 */
@Service("facebook.RelationService")
@Validated
@EntityService(entityClass = Relation.class, serviceId = "facebook")
public class RelationServiceImpl implements RelationService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RelationServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("facebook.FamilyService")
    private FamilyService familyService;

    @Autowired
    @Qualifier("facebook.RelationDao")
    private WMGenericDao<Relation, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Relation, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public Relation create(Relation relation) {
        LOGGER.debug("Creating a new Relation with information: {}", relation);

        Relation relationCreated = this.wmGenericDao.create(relation);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(relationCreated);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Relation getById(Integer relationId) {
        LOGGER.debug("Finding Relation by id: {}", relationId);
        return this.wmGenericDao.findById(relationId);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Relation findById(Integer relationId) {
        LOGGER.debug("Finding Relation by id: {}", relationId);
        try {
            return this.wmGenericDao.findById(relationId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Relation found with id: {}", relationId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public List<Relation> findByMultipleIds(List<Integer> relationIds, boolean orderedReturn) {
        LOGGER.debug("Finding Relations by ids: {}", relationIds);

        return this.wmGenericDao.findByMultipleIds(relationIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Relation getByRelName(String relName) {
        Map<String, Object> relNameMap = new HashMap<>();
        relNameMap.put("relName", relName);

        LOGGER.debug("Finding Relation by unique keys: {}", relNameMap);
        return this.wmGenericDao.findByUniqueKey(relNameMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "facebookTransactionManager")
    @Override
    public Relation update(Relation relation) {
        LOGGER.debug("Updating Relation with information: {}", relation);

        this.wmGenericDao.update(relation);
        this.wmGenericDao.refresh(relation);

        return relation;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public Relation partialUpdate(Integer relationId, Map<String, Object>relationPatch) {
        LOGGER.debug("Partially Updating the Relation with id: {}", relationId);

        Relation relation = getById(relationId);

        try {
            ObjectReader relationReader = this.objectMapper.reader().forType(Relation.class).withValueToUpdate(relation);
            relation = relationReader.readValue(this.objectMapper.writeValueAsString(relationPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", relationPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        relation = update(relation);

        return relation;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public Relation delete(Integer relationId) {
        LOGGER.debug("Deleting Relation with id: {}", relationId);
        Relation deleted = this.wmGenericDao.findById(relationId);
        if (deleted == null) {
            LOGGER.debug("No Relation found with id: {}", relationId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Relation.class.getSimpleName(), relationId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public void delete(Relation relation) {
        LOGGER.debug("Deleting Relation with {}", relation);
        this.wmGenericDao.delete(relation);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Relation> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Relations");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Relation> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Relations");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service facebook for table Relation to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service facebook for table Relation to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Family> findAssociatedFamilies(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated families");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("relation.id = '" + id + "'");

        return familyService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service FamilyService instance
     */
    protected void setFamilyService(FamilyService service) {
        this.familyService = service;
    }

}