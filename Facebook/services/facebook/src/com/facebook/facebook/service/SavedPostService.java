/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.SavedPost;

/**
 * Service object for domain model class {@link SavedPost}.
 */
public interface SavedPostService {

    /**
     * Creates a new SavedPost. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on SavedPost if any.
     *
     * @param savedPost Details of the SavedPost to be created; value cannot be null.
     * @return The newly created SavedPost.
     */
    SavedPost create(@Valid SavedPost savedPost);


	/**
     * Returns SavedPost by given id if exists.
     *
     * @param savedpostId The id of the SavedPost to get; value cannot be null.
     * @return SavedPost associated with the given savedpostId.
	 * @throws EntityNotFoundException If no SavedPost is found.
     */
    SavedPost getById(Integer savedpostId);

    /**
     * Find and return the SavedPost by given id if exists, returns null otherwise.
     *
     * @param savedpostId The id of the SavedPost to get; value cannot be null.
     * @return SavedPost associated with the given savedpostId.
     */
    SavedPost findById(Integer savedpostId);

	/**
     * Find and return the list of SavedPosts by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param savedpostIds The id's of the SavedPost to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return SavedPosts associated with the given savedpostIds.
     */
    List<SavedPost> findByMultipleIds(List<Integer> savedpostIds, boolean orderedReturn);

    /**
     * Find and return the SavedPost for given postId  andsavedUserId  if exists.
     *
     * @param postId value of postId; value cannot be null.
     * @param savedUserId value of savedUserId; value cannot be null.
     * @return SavedPost associated with the given inputs.
     * @throws EntityNotFoundException if no matching SavedPost found.
     */
    SavedPost getByPostIdAndSavedUserId(Integer postId, Integer savedUserId);

    /**
     * Updates the details of an existing SavedPost. It replaces all fields of the existing SavedPost with the given savedPost.
     *
     * This method overrides the input field values using Server side or database managed properties defined on SavedPost if any.
     *
     * @param savedPost The details of the SavedPost to be updated; value cannot be null.
     * @return The updated SavedPost.
     * @throws EntityNotFoundException if no SavedPost is found with given input.
     */
    SavedPost update(@Valid SavedPost savedPost);


    /**
     * Partially updates the details of an existing SavedPost. It updates only the
     * fields of the existing SavedPost which are passed in the savedPostPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on SavedPost if any.
     *
     * @param savedpostId The id of the SavedPost to be deleted; value cannot be null.
     * @param savedPostPatch The partial data of SavedPost which is supposed to be updated; value cannot be null.
     * @return The updated SavedPost.
     * @throws EntityNotFoundException if no SavedPost is found with given input.
     */
    SavedPost partialUpdate(Integer savedpostId, Map<String, Object> savedPostPatch);

    /**
     * Deletes an existing SavedPost with the given id.
     *
     * @param savedpostId The id of the SavedPost to be deleted; value cannot be null.
     * @return The deleted SavedPost.
     * @throws EntityNotFoundException if no SavedPost found with the given id.
     */
    SavedPost delete(Integer savedpostId);

    /**
     * Deletes an existing SavedPost with the given object.
     *
     * @param savedPost The instance of the SavedPost to be deleted; value cannot be null.
     */
    void delete(SavedPost savedPost);

    /**
     * Find all SavedPosts matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching SavedPosts.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<SavedPost> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all SavedPosts matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching SavedPosts.
     *
     * @see Pageable
     * @see Page
     */
    Page<SavedPost> findAll(String query, Pageable pageable);

    /**
     * Exports all SavedPosts matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all SavedPosts matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the SavedPosts in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the SavedPost.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}