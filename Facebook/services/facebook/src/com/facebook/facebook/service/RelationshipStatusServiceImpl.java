/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.RelationshipStatus;
import com.facebook.facebook.Users;


/**
 * ServiceImpl object for domain model class RelationshipStatus.
 *
 * @see RelationshipStatus
 */
@Service("facebook.RelationshipStatusService")
@Validated
@EntityService(entityClass = RelationshipStatus.class, serviceId = "facebook")
public class RelationshipStatusServiceImpl implements RelationshipStatusService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RelationshipStatusServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("facebook.UsersService")
    private UsersService usersService;

    @Autowired
    @Qualifier("facebook.RelationshipStatusDao")
    private WMGenericDao<RelationshipStatus, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<RelationshipStatus, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public RelationshipStatus create(RelationshipStatus relationshipStatus) {
        LOGGER.debug("Creating a new RelationshipStatus with information: {}", relationshipStatus);

        RelationshipStatus relationshipStatusCreated = this.wmGenericDao.create(relationshipStatus);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(relationshipStatusCreated);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public RelationshipStatus getById(Integer relationshipstatusId) {
        LOGGER.debug("Finding RelationshipStatus by id: {}", relationshipstatusId);
        return this.wmGenericDao.findById(relationshipstatusId);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public RelationshipStatus findById(Integer relationshipstatusId) {
        LOGGER.debug("Finding RelationshipStatus by id: {}", relationshipstatusId);
        try {
            return this.wmGenericDao.findById(relationshipstatusId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No RelationshipStatus found with id: {}", relationshipstatusId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public List<RelationshipStatus> findByMultipleIds(List<Integer> relationshipstatusIds, boolean orderedReturn) {
        LOGGER.debug("Finding RelationshipStatuses by ids: {}", relationshipstatusIds);

        return this.wmGenericDao.findByMultipleIds(relationshipstatusIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "facebookTransactionManager")
    @Override
    public RelationshipStatus update(RelationshipStatus relationshipStatus) {
        LOGGER.debug("Updating RelationshipStatus with information: {}", relationshipStatus);

        this.wmGenericDao.update(relationshipStatus);
        this.wmGenericDao.refresh(relationshipStatus);

        return relationshipStatus;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public RelationshipStatus partialUpdate(Integer relationshipstatusId, Map<String, Object>relationshipStatusPatch) {
        LOGGER.debug("Partially Updating the RelationshipStatus with id: {}", relationshipstatusId);

        RelationshipStatus relationshipStatus = getById(relationshipstatusId);

        try {
            ObjectReader relationshipStatusReader = this.objectMapper.reader().forType(RelationshipStatus.class).withValueToUpdate(relationshipStatus);
            relationshipStatus = relationshipStatusReader.readValue(this.objectMapper.writeValueAsString(relationshipStatusPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", relationshipStatusPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        relationshipStatus = update(relationshipStatus);

        return relationshipStatus;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public RelationshipStatus delete(Integer relationshipstatusId) {
        LOGGER.debug("Deleting RelationshipStatus with id: {}", relationshipstatusId);
        RelationshipStatus deleted = this.wmGenericDao.findById(relationshipstatusId);
        if (deleted == null) {
            LOGGER.debug("No RelationshipStatus found with id: {}", relationshipstatusId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), RelationshipStatus.class.getSimpleName(), relationshipstatusId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public void delete(RelationshipStatus relationshipStatus) {
        LOGGER.debug("Deleting RelationshipStatus with {}", relationshipStatus);
        this.wmGenericDao.delete(relationshipStatus);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<RelationshipStatus> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all RelationshipStatuses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<RelationshipStatus> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all RelationshipStatuses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service facebook for table RelationshipStatus to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service facebook for table RelationshipStatus to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Users> findAssociatedUserses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated userses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("relationshipStatus.id = '" + id + "'");

        return usersService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service UsersService instance
     */
    protected void setUsersService(UsersService service) {
        this.usersService = service;
    }

}