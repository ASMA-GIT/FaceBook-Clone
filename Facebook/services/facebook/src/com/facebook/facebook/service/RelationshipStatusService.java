/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.RelationshipStatus;
import com.facebook.facebook.Users;

/**
 * Service object for domain model class {@link RelationshipStatus}.
 */
public interface RelationshipStatusService {

    /**
     * Creates a new RelationshipStatus. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on RelationshipStatus if any.
     *
     * @param relationshipStatus Details of the RelationshipStatus to be created; value cannot be null.
     * @return The newly created RelationshipStatus.
     */
    RelationshipStatus create(@Valid RelationshipStatus relationshipStatus);


	/**
     * Returns RelationshipStatus by given id if exists.
     *
     * @param relationshipstatusId The id of the RelationshipStatus to get; value cannot be null.
     * @return RelationshipStatus associated with the given relationshipstatusId.
	 * @throws EntityNotFoundException If no RelationshipStatus is found.
     */
    RelationshipStatus getById(Integer relationshipstatusId);

    /**
     * Find and return the RelationshipStatus by given id if exists, returns null otherwise.
     *
     * @param relationshipstatusId The id of the RelationshipStatus to get; value cannot be null.
     * @return RelationshipStatus associated with the given relationshipstatusId.
     */
    RelationshipStatus findById(Integer relationshipstatusId);

	/**
     * Find and return the list of RelationshipStatuses by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param relationshipstatusIds The id's of the RelationshipStatus to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return RelationshipStatuses associated with the given relationshipstatusIds.
     */
    List<RelationshipStatus> findByMultipleIds(List<Integer> relationshipstatusIds, boolean orderedReturn);


    /**
     * Updates the details of an existing RelationshipStatus. It replaces all fields of the existing RelationshipStatus with the given relationshipStatus.
     *
     * This method overrides the input field values using Server side or database managed properties defined on RelationshipStatus if any.
     *
     * @param relationshipStatus The details of the RelationshipStatus to be updated; value cannot be null.
     * @return The updated RelationshipStatus.
     * @throws EntityNotFoundException if no RelationshipStatus is found with given input.
     */
    RelationshipStatus update(@Valid RelationshipStatus relationshipStatus);


    /**
     * Partially updates the details of an existing RelationshipStatus. It updates only the
     * fields of the existing RelationshipStatus which are passed in the relationshipStatusPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on RelationshipStatus if any.
     *
     * @param relationshipstatusId The id of the RelationshipStatus to be deleted; value cannot be null.
     * @param relationshipStatusPatch The partial data of RelationshipStatus which is supposed to be updated; value cannot be null.
     * @return The updated RelationshipStatus.
     * @throws EntityNotFoundException if no RelationshipStatus is found with given input.
     */
    RelationshipStatus partialUpdate(Integer relationshipstatusId, Map<String, Object> relationshipStatusPatch);

    /**
     * Deletes an existing RelationshipStatus with the given id.
     *
     * @param relationshipstatusId The id of the RelationshipStatus to be deleted; value cannot be null.
     * @return The deleted RelationshipStatus.
     * @throws EntityNotFoundException if no RelationshipStatus found with the given id.
     */
    RelationshipStatus delete(Integer relationshipstatusId);

    /**
     * Deletes an existing RelationshipStatus with the given object.
     *
     * @param relationshipStatus The instance of the RelationshipStatus to be deleted; value cannot be null.
     */
    void delete(RelationshipStatus relationshipStatus);

    /**
     * Find all RelationshipStatuses matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching RelationshipStatuses.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<RelationshipStatus> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all RelationshipStatuses matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching RelationshipStatuses.
     *
     * @see Pageable
     * @see Page
     */
    Page<RelationshipStatus> findAll(String query, Pageable pageable);

    /**
     * Exports all RelationshipStatuses matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all RelationshipStatuses matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the RelationshipStatuses in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the RelationshipStatus.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated userses for given RelationshipStatus id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Users instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Users> findAssociatedUserses(Integer id, Pageable pageable);

}