/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.PlacesLived;


/**
 * ServiceImpl object for domain model class PlacesLived.
 *
 * @see PlacesLived
 */
@Service("facebook.PlacesLivedService")
@Validated
@EntityService(entityClass = PlacesLived.class, serviceId = "facebook")
public class PlacesLivedServiceImpl implements PlacesLivedService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PlacesLivedServiceImpl.class);


    @Autowired
    @Qualifier("facebook.PlacesLivedDao")
    private WMGenericDao<PlacesLived, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<PlacesLived, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public PlacesLived create(PlacesLived placesLived) {
        LOGGER.debug("Creating a new PlacesLived with information: {}", placesLived);

        PlacesLived placesLivedCreated = this.wmGenericDao.create(placesLived);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(placesLivedCreated);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public PlacesLived getById(Integer placeslivedId) {
        LOGGER.debug("Finding PlacesLived by id: {}", placeslivedId);
        return this.wmGenericDao.findById(placeslivedId);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public PlacesLived findById(Integer placeslivedId) {
        LOGGER.debug("Finding PlacesLived by id: {}", placeslivedId);
        try {
            return this.wmGenericDao.findById(placeslivedId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No PlacesLived found with id: {}", placeslivedId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public List<PlacesLived> findByMultipleIds(List<Integer> placeslivedIds, boolean orderedReturn) {
        LOGGER.debug("Finding PlacesLiveds by ids: {}", placeslivedIds);

        return this.wmGenericDao.findByMultipleIds(placeslivedIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "facebookTransactionManager")
    @Override
    public PlacesLived update(PlacesLived placesLived) {
        LOGGER.debug("Updating PlacesLived with information: {}", placesLived);

        this.wmGenericDao.update(placesLived);
        this.wmGenericDao.refresh(placesLived);

        return placesLived;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public PlacesLived partialUpdate(Integer placeslivedId, Map<String, Object>placesLivedPatch) {
        LOGGER.debug("Partially Updating the PlacesLived with id: {}", placeslivedId);

        PlacesLived placesLived = getById(placeslivedId);

        try {
            ObjectReader placesLivedReader = this.objectMapper.reader().forType(PlacesLived.class).withValueToUpdate(placesLived);
            placesLived = placesLivedReader.readValue(this.objectMapper.writeValueAsString(placesLivedPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", placesLivedPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        placesLived = update(placesLived);

        return placesLived;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public PlacesLived delete(Integer placeslivedId) {
        LOGGER.debug("Deleting PlacesLived with id: {}", placeslivedId);
        PlacesLived deleted = this.wmGenericDao.findById(placeslivedId);
        if (deleted == null) {
            LOGGER.debug("No PlacesLived found with id: {}", placeslivedId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), PlacesLived.class.getSimpleName(), placeslivedId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public void delete(PlacesLived placesLived) {
        LOGGER.debug("Deleting PlacesLived with {}", placesLived);
        this.wmGenericDao.delete(placesLived);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<PlacesLived> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PlacesLiveds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<PlacesLived> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PlacesLiveds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service facebook for table PlacesLived to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service facebook for table PlacesLived to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}