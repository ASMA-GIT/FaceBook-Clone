/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.Working;

/**
 * Service object for domain model class {@link Working}.
 */
public interface WorkingService {

    /**
     * Creates a new Working. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Working if any.
     *
     * @param working Details of the Working to be created; value cannot be null.
     * @return The newly created Working.
     */
    Working create(@Valid Working working);


	/**
     * Returns Working by given id if exists.
     *
     * @param workingId The id of the Working to get; value cannot be null.
     * @return Working associated with the given workingId.
	 * @throws EntityNotFoundException If no Working is found.
     */
    Working getById(Integer workingId);

    /**
     * Find and return the Working by given id if exists, returns null otherwise.
     *
     * @param workingId The id of the Working to get; value cannot be null.
     * @return Working associated with the given workingId.
     */
    Working findById(Integer workingId);

	/**
     * Find and return the list of Workings by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param workingIds The id's of the Working to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Workings associated with the given workingIds.
     */
    List<Working> findByMultipleIds(List<Integer> workingIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Working. It replaces all fields of the existing Working with the given working.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Working if any.
     *
     * @param working The details of the Working to be updated; value cannot be null.
     * @return The updated Working.
     * @throws EntityNotFoundException if no Working is found with given input.
     */
    Working update(@Valid Working working);


    /**
     * Partially updates the details of an existing Working. It updates only the
     * fields of the existing Working which are passed in the workingPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Working if any.
     *
     * @param workingId The id of the Working to be deleted; value cannot be null.
     * @param workingPatch The partial data of Working which is supposed to be updated; value cannot be null.
     * @return The updated Working.
     * @throws EntityNotFoundException if no Working is found with given input.
     */
    Working partialUpdate(Integer workingId, Map<String, Object> workingPatch);

    /**
     * Deletes an existing Working with the given id.
     *
     * @param workingId The id of the Working to be deleted; value cannot be null.
     * @return The deleted Working.
     * @throws EntityNotFoundException if no Working found with the given id.
     */
    Working delete(Integer workingId);

    /**
     * Deletes an existing Working with the given object.
     *
     * @param working The instance of the Working to be deleted; value cannot be null.
     */
    void delete(Working working);

    /**
     * Find all Workings matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Workings.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Working> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Workings matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Workings.
     *
     * @see Pageable
     * @see Page
     */
    Page<Working> findAll(String query, Pageable pageable);

    /**
     * Exports all Workings matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Workings matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Workings in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Working.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}