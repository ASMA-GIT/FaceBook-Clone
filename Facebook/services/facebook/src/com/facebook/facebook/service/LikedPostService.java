/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.LikedPost;

/**
 * Service object for domain model class {@link LikedPost}.
 */
public interface LikedPostService {

    /**
     * Creates a new LikedPost. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on LikedPost if any.
     *
     * @param likedPost Details of the LikedPost to be created; value cannot be null.
     * @return The newly created LikedPost.
     */
    LikedPost create(@Valid LikedPost likedPost);


	/**
     * Returns LikedPost by given id if exists.
     *
     * @param likedpostId The id of the LikedPost to get; value cannot be null.
     * @return LikedPost associated with the given likedpostId.
	 * @throws EntityNotFoundException If no LikedPost is found.
     */
    LikedPost getById(Integer likedpostId);

    /**
     * Find and return the LikedPost by given id if exists, returns null otherwise.
     *
     * @param likedpostId The id of the LikedPost to get; value cannot be null.
     * @return LikedPost associated with the given likedpostId.
     */
    LikedPost findById(Integer likedpostId);

	/**
     * Find and return the list of LikedPosts by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param likedpostIds The id's of the LikedPost to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return LikedPosts associated with the given likedpostIds.
     */
    List<LikedPost> findByMultipleIds(List<Integer> likedpostIds, boolean orderedReturn);

    /**
     * Find and return the LikedPost for given postId  andlikedUserId  if exists.
     *
     * @param postId value of postId; value cannot be null.
     * @param likedUserId value of likedUserId; value cannot be null.
     * @return LikedPost associated with the given inputs.
     * @throws EntityNotFoundException if no matching LikedPost found.
     */
    LikedPost getByPostIdAndLikedUserId(int postId, int likedUserId);

    /**
     * Updates the details of an existing LikedPost. It replaces all fields of the existing LikedPost with the given likedPost.
     *
     * This method overrides the input field values using Server side or database managed properties defined on LikedPost if any.
     *
     * @param likedPost The details of the LikedPost to be updated; value cannot be null.
     * @return The updated LikedPost.
     * @throws EntityNotFoundException if no LikedPost is found with given input.
     */
    LikedPost update(@Valid LikedPost likedPost);


    /**
     * Partially updates the details of an existing LikedPost. It updates only the
     * fields of the existing LikedPost which are passed in the likedPostPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on LikedPost if any.
     *
     * @param likedpostId The id of the LikedPost to be deleted; value cannot be null.
     * @param likedPostPatch The partial data of LikedPost which is supposed to be updated; value cannot be null.
     * @return The updated LikedPost.
     * @throws EntityNotFoundException if no LikedPost is found with given input.
     */
    LikedPost partialUpdate(Integer likedpostId, Map<String, Object> likedPostPatch);

    /**
     * Deletes an existing LikedPost with the given id.
     *
     * @param likedpostId The id of the LikedPost to be deleted; value cannot be null.
     * @return The deleted LikedPost.
     * @throws EntityNotFoundException if no LikedPost found with the given id.
     */
    LikedPost delete(Integer likedpostId);

    /**
     * Deletes an existing LikedPost with the given object.
     *
     * @param likedPost The instance of the LikedPost to be deleted; value cannot be null.
     */
    void delete(LikedPost likedPost);

    /**
     * Find all LikedPosts matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching LikedPosts.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<LikedPost> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all LikedPosts matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching LikedPosts.
     *
     * @see Pageable
     * @see Page
     */
    Page<LikedPost> findAll(String query, Pageable pageable);

    /**
     * Exports all LikedPosts matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all LikedPosts matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the LikedPosts in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the LikedPost.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}