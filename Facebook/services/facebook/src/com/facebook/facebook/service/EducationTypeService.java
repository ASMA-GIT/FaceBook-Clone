/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.Education;
import com.facebook.facebook.EducationType;

/**
 * Service object for domain model class {@link EducationType}.
 */
public interface EducationTypeService {

    /**
     * Creates a new EducationType. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on EducationType if any.
     *
     * @param educationType Details of the EducationType to be created; value cannot be null.
     * @return The newly created EducationType.
     */
    EducationType create(@Valid EducationType educationType);


	/**
     * Returns EducationType by given id if exists.
     *
     * @param educationtypeId The id of the EducationType to get; value cannot be null.
     * @return EducationType associated with the given educationtypeId.
	 * @throws EntityNotFoundException If no EducationType is found.
     */
    EducationType getById(Integer educationtypeId);

    /**
     * Find and return the EducationType by given id if exists, returns null otherwise.
     *
     * @param educationtypeId The id of the EducationType to get; value cannot be null.
     * @return EducationType associated with the given educationtypeId.
     */
    EducationType findById(Integer educationtypeId);

	/**
     * Find and return the list of EducationTypes by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param educationtypeIds The id's of the EducationType to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return EducationTypes associated with the given educationtypeIds.
     */
    List<EducationType> findByMultipleIds(List<Integer> educationtypeIds, boolean orderedReturn);


    /**
     * Updates the details of an existing EducationType. It replaces all fields of the existing EducationType with the given educationType.
     *
     * This method overrides the input field values using Server side or database managed properties defined on EducationType if any.
     *
     * @param educationType The details of the EducationType to be updated; value cannot be null.
     * @return The updated EducationType.
     * @throws EntityNotFoundException if no EducationType is found with given input.
     */
    EducationType update(@Valid EducationType educationType);


    /**
     * Partially updates the details of an existing EducationType. It updates only the
     * fields of the existing EducationType which are passed in the educationTypePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on EducationType if any.
     *
     * @param educationtypeId The id of the EducationType to be deleted; value cannot be null.
     * @param educationTypePatch The partial data of EducationType which is supposed to be updated; value cannot be null.
     * @return The updated EducationType.
     * @throws EntityNotFoundException if no EducationType is found with given input.
     */
    EducationType partialUpdate(Integer educationtypeId, Map<String, Object> educationTypePatch);

    /**
     * Deletes an existing EducationType with the given id.
     *
     * @param educationtypeId The id of the EducationType to be deleted; value cannot be null.
     * @return The deleted EducationType.
     * @throws EntityNotFoundException if no EducationType found with the given id.
     */
    EducationType delete(Integer educationtypeId);

    /**
     * Deletes an existing EducationType with the given object.
     *
     * @param educationType The instance of the EducationType to be deleted; value cannot be null.
     */
    void delete(EducationType educationType);

    /**
     * Find all EducationTypes matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching EducationTypes.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<EducationType> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all EducationTypes matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching EducationTypes.
     *
     * @see Pageable
     * @see Page
     */
    Page<EducationType> findAll(String query, Pageable pageable);

    /**
     * Exports all EducationTypes matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all EducationTypes matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the EducationTypes in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the EducationType.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated educations for given EducationType id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Education instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Education> findAssociatedEducations(Integer id, Pageable pageable);

}