/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.HobbieType;
import com.facebook.facebook.Hobbies;

/**
 * Service object for domain model class {@link HobbieType}.
 */
public interface HobbieTypeService {

    /**
     * Creates a new HobbieType. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on HobbieType if any.
     *
     * @param hobbieType Details of the HobbieType to be created; value cannot be null.
     * @return The newly created HobbieType.
     */
    HobbieType create(@Valid HobbieType hobbieType);


	/**
     * Returns HobbieType by given id if exists.
     *
     * @param hobbietypeId The id of the HobbieType to get; value cannot be null.
     * @return HobbieType associated with the given hobbietypeId.
	 * @throws EntityNotFoundException If no HobbieType is found.
     */
    HobbieType getById(Integer hobbietypeId);

    /**
     * Find and return the HobbieType by given id if exists, returns null otherwise.
     *
     * @param hobbietypeId The id of the HobbieType to get; value cannot be null.
     * @return HobbieType associated with the given hobbietypeId.
     */
    HobbieType findById(Integer hobbietypeId);

	/**
     * Find and return the list of HobbieTypes by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param hobbietypeIds The id's of the HobbieType to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return HobbieTypes associated with the given hobbietypeIds.
     */
    List<HobbieType> findByMultipleIds(List<Integer> hobbietypeIds, boolean orderedReturn);

    /**
     * Find and return the HobbieType for given hobbieName  if exists.
     *
     * @param hobbieName value of hobbieName; value cannot be null.
     * @return HobbieType associated with the given inputs.
     * @throws EntityNotFoundException if no matching HobbieType found.
     */
    HobbieType getByHobbieName(String hobbieName);

    /**
     * Updates the details of an existing HobbieType. It replaces all fields of the existing HobbieType with the given hobbieType.
     *
     * This method overrides the input field values using Server side or database managed properties defined on HobbieType if any.
     *
     * @param hobbieType The details of the HobbieType to be updated; value cannot be null.
     * @return The updated HobbieType.
     * @throws EntityNotFoundException if no HobbieType is found with given input.
     */
    HobbieType update(@Valid HobbieType hobbieType);


    /**
     * Partially updates the details of an existing HobbieType. It updates only the
     * fields of the existing HobbieType which are passed in the hobbieTypePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on HobbieType if any.
     *
     * @param hobbietypeId The id of the HobbieType to be deleted; value cannot be null.
     * @param hobbieTypePatch The partial data of HobbieType which is supposed to be updated; value cannot be null.
     * @return The updated HobbieType.
     * @throws EntityNotFoundException if no HobbieType is found with given input.
     */
    HobbieType partialUpdate(Integer hobbietypeId, Map<String, Object> hobbieTypePatch);

    /**
     * Deletes an existing HobbieType with the given id.
     *
     * @param hobbietypeId The id of the HobbieType to be deleted; value cannot be null.
     * @return The deleted HobbieType.
     * @throws EntityNotFoundException if no HobbieType found with the given id.
     */
    HobbieType delete(Integer hobbietypeId);

    /**
     * Deletes an existing HobbieType with the given object.
     *
     * @param hobbieType The instance of the HobbieType to be deleted; value cannot be null.
     */
    void delete(HobbieType hobbieType);

    /**
     * Find all HobbieTypes matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching HobbieTypes.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<HobbieType> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all HobbieTypes matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching HobbieTypes.
     *
     * @see Pageable
     * @see Page
     */
    Page<HobbieType> findAll(String query, Pageable pageable);

    /**
     * Exports all HobbieTypes matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all HobbieTypes matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the HobbieTypes in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the HobbieType.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated hobbieses for given HobbieType id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Hobbies instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Hobbies> findAssociatedHobbieses(Integer id, Pageable pageable);

}