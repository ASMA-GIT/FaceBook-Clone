/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.Gender;
import com.facebook.facebook.Users;

/**
 * Service object for domain model class {@link Gender}.
 */
public interface GenderService {

    /**
     * Creates a new Gender. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Gender if any.
     *
     * @param gender Details of the Gender to be created; value cannot be null.
     * @return The newly created Gender.
     */
    Gender create(@Valid Gender gender);


	/**
     * Returns Gender by given id if exists.
     *
     * @param genderId The id of the Gender to get; value cannot be null.
     * @return Gender associated with the given genderId.
	 * @throws EntityNotFoundException If no Gender is found.
     */
    Gender getById(Integer genderId);

    /**
     * Find and return the Gender by given id if exists, returns null otherwise.
     *
     * @param genderId The id of the Gender to get; value cannot be null.
     * @return Gender associated with the given genderId.
     */
    Gender findById(Integer genderId);

	/**
     * Find and return the list of Genders by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param genderIds The id's of the Gender to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Genders associated with the given genderIds.
     */
    List<Gender> findByMultipleIds(List<Integer> genderIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Gender. It replaces all fields of the existing Gender with the given gender.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Gender if any.
     *
     * @param gender The details of the Gender to be updated; value cannot be null.
     * @return The updated Gender.
     * @throws EntityNotFoundException if no Gender is found with given input.
     */
    Gender update(@Valid Gender gender);


    /**
     * Partially updates the details of an existing Gender. It updates only the
     * fields of the existing Gender which are passed in the genderPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Gender if any.
     *
     * @param genderId The id of the Gender to be deleted; value cannot be null.
     * @param genderPatch The partial data of Gender which is supposed to be updated; value cannot be null.
     * @return The updated Gender.
     * @throws EntityNotFoundException if no Gender is found with given input.
     */
    Gender partialUpdate(Integer genderId, Map<String, Object> genderPatch);

    /**
     * Deletes an existing Gender with the given id.
     *
     * @param genderId The id of the Gender to be deleted; value cannot be null.
     * @return The deleted Gender.
     * @throws EntityNotFoundException if no Gender found with the given id.
     */
    Gender delete(Integer genderId);

    /**
     * Deletes an existing Gender with the given object.
     *
     * @param gender The instance of the Gender to be deleted; value cannot be null.
     */
    void delete(Gender gender);

    /**
     * Find all Genders matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Genders.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Gender> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Genders matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Genders.
     *
     * @see Pageable
     * @see Page
     */
    Page<Gender> findAll(String query, Pageable pageable);

    /**
     * Exports all Genders matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Genders matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Genders in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Gender.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated userses for given Gender id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Users instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Users> findAssociatedUserses(Integer id, Pageable pageable);

}