/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.Family;

/**
 * Service object for domain model class {@link Family}.
 */
public interface FamilyService {

    /**
     * Creates a new Family. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Family if any.
     *
     * @param family Details of the Family to be created; value cannot be null.
     * @return The newly created Family.
     */
    Family create(@Valid Family family);


	/**
     * Returns Family by given id if exists.
     *
     * @param familyId The id of the Family to get; value cannot be null.
     * @return Family associated with the given familyId.
	 * @throws EntityNotFoundException If no Family is found.
     */
    Family getById(Integer familyId);

    /**
     * Find and return the Family by given id if exists, returns null otherwise.
     *
     * @param familyId The id of the Family to get; value cannot be null.
     * @return Family associated with the given familyId.
     */
    Family findById(Integer familyId);

	/**
     * Find and return the list of Families by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param familyIds The id's of the Family to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Families associated with the given familyIds.
     */
    List<Family> findByMultipleIds(List<Integer> familyIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Family. It replaces all fields of the existing Family with the given family.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Family if any.
     *
     * @param family The details of the Family to be updated; value cannot be null.
     * @return The updated Family.
     * @throws EntityNotFoundException if no Family is found with given input.
     */
    Family update(@Valid Family family);


    /**
     * Partially updates the details of an existing Family. It updates only the
     * fields of the existing Family which are passed in the familyPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Family if any.
     *
     * @param familyId The id of the Family to be deleted; value cannot be null.
     * @param familyPatch The partial data of Family which is supposed to be updated; value cannot be null.
     * @return The updated Family.
     * @throws EntityNotFoundException if no Family is found with given input.
     */
    Family partialUpdate(Integer familyId, Map<String, Object> familyPatch);

    /**
     * Deletes an existing Family with the given id.
     *
     * @param familyId The id of the Family to be deleted; value cannot be null.
     * @return The deleted Family.
     * @throws EntityNotFoundException if no Family found with the given id.
     */
    Family delete(Integer familyId);

    /**
     * Deletes an existing Family with the given object.
     *
     * @param family The instance of the Family to be deleted; value cannot be null.
     */
    void delete(Family family);

    /**
     * Find all Families matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Families.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Family> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Families matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Families.
     *
     * @see Pageable
     * @see Page
     */
    Page<Family> findAll(String query, Pageable pageable);

    /**
     * Exports all Families matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Families matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Families in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Family.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}