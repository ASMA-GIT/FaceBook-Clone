/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.Chat;
import com.facebook.facebook.Messages;

/**
 * Service object for domain model class {@link Chat}.
 */
public interface ChatService {

    /**
     * Creates a new Chat. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Chat if any.
     *
     * @param chat Details of the Chat to be created; value cannot be null.
     * @return The newly created Chat.
     */
    Chat create(@Valid Chat chat);


	/**
     * Returns Chat by given id if exists.
     *
     * @param chatId The id of the Chat to get; value cannot be null.
     * @return Chat associated with the given chatId.
	 * @throws EntityNotFoundException If no Chat is found.
     */
    Chat getById(Integer chatId);

    /**
     * Find and return the Chat by given id if exists, returns null otherwise.
     *
     * @param chatId The id of the Chat to get; value cannot be null.
     * @return Chat associated with the given chatId.
     */
    Chat findById(Integer chatId);

	/**
     * Find and return the list of Chats by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param chatIds The id's of the Chat to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Chats associated with the given chatIds.
     */
    List<Chat> findByMultipleIds(List<Integer> chatIds, boolean orderedReturn);

    /**
     * Find and return the Chat for given user1Id  anduser2Id  if exists.
     *
     * @param user1Id value of user1Id; value cannot be null.
     * @param user2Id value of user2Id; value cannot be null.
     * @return Chat associated with the given inputs.
     * @throws EntityNotFoundException if no matching Chat found.
     */
    Chat getByUser1IdAndUser2Id(Integer user1Id, Integer user2Id);

    /**
     * Updates the details of an existing Chat. It replaces all fields of the existing Chat with the given chat.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Chat if any.
     *
     * @param chat The details of the Chat to be updated; value cannot be null.
     * @return The updated Chat.
     * @throws EntityNotFoundException if no Chat is found with given input.
     */
    Chat update(@Valid Chat chat);


    /**
     * Partially updates the details of an existing Chat. It updates only the
     * fields of the existing Chat which are passed in the chatPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Chat if any.
     *
     * @param chatId The id of the Chat to be deleted; value cannot be null.
     * @param chatPatch The partial data of Chat which is supposed to be updated; value cannot be null.
     * @return The updated Chat.
     * @throws EntityNotFoundException if no Chat is found with given input.
     */
    Chat partialUpdate(Integer chatId, Map<String, Object> chatPatch);

    /**
     * Deletes an existing Chat with the given id.
     *
     * @param chatId The id of the Chat to be deleted; value cannot be null.
     * @return The deleted Chat.
     * @throws EntityNotFoundException if no Chat found with the given id.
     */
    Chat delete(Integer chatId);

    /**
     * Deletes an existing Chat with the given object.
     *
     * @param chat The instance of the Chat to be deleted; value cannot be null.
     */
    void delete(Chat chat);

    /**
     * Find all Chats matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Chats.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Chat> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Chats matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Chats.
     *
     * @see Pageable
     * @see Page
     */
    Page<Chat> findAll(String query, Pageable pageable);

    /**
     * Exports all Chats matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Chats matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Chats in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Chat.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated messageses for given Chat id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Messages instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Messages> findAssociatedMessageses(Integer id, Pageable pageable);

}