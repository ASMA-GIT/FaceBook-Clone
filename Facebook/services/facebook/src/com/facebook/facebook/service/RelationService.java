/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.Family;
import com.facebook.facebook.Relation;

/**
 * Service object for domain model class {@link Relation}.
 */
public interface RelationService {

    /**
     * Creates a new Relation. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Relation if any.
     *
     * @param relation Details of the Relation to be created; value cannot be null.
     * @return The newly created Relation.
     */
    Relation create(@Valid Relation relation);


	/**
     * Returns Relation by given id if exists.
     *
     * @param relationId The id of the Relation to get; value cannot be null.
     * @return Relation associated with the given relationId.
	 * @throws EntityNotFoundException If no Relation is found.
     */
    Relation getById(Integer relationId);

    /**
     * Find and return the Relation by given id if exists, returns null otherwise.
     *
     * @param relationId The id of the Relation to get; value cannot be null.
     * @return Relation associated with the given relationId.
     */
    Relation findById(Integer relationId);

	/**
     * Find and return the list of Relations by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param relationIds The id's of the Relation to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Relations associated with the given relationIds.
     */
    List<Relation> findByMultipleIds(List<Integer> relationIds, boolean orderedReturn);

    /**
     * Find and return the Relation for given relName  if exists.
     *
     * @param relName value of relName; value cannot be null.
     * @return Relation associated with the given inputs.
     * @throws EntityNotFoundException if no matching Relation found.
     */
    Relation getByRelName(String relName);

    /**
     * Updates the details of an existing Relation. It replaces all fields of the existing Relation with the given relation.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Relation if any.
     *
     * @param relation The details of the Relation to be updated; value cannot be null.
     * @return The updated Relation.
     * @throws EntityNotFoundException if no Relation is found with given input.
     */
    Relation update(@Valid Relation relation);


    /**
     * Partially updates the details of an existing Relation. It updates only the
     * fields of the existing Relation which are passed in the relationPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Relation if any.
     *
     * @param relationId The id of the Relation to be deleted; value cannot be null.
     * @param relationPatch The partial data of Relation which is supposed to be updated; value cannot be null.
     * @return The updated Relation.
     * @throws EntityNotFoundException if no Relation is found with given input.
     */
    Relation partialUpdate(Integer relationId, Map<String, Object> relationPatch);

    /**
     * Deletes an existing Relation with the given id.
     *
     * @param relationId The id of the Relation to be deleted; value cannot be null.
     * @return The deleted Relation.
     * @throws EntityNotFoundException if no Relation found with the given id.
     */
    Relation delete(Integer relationId);

    /**
     * Deletes an existing Relation with the given object.
     *
     * @param relation The instance of the Relation to be deleted; value cannot be null.
     */
    void delete(Relation relation);

    /**
     * Find all Relations matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Relations.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Relation> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Relations matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Relations.
     *
     * @see Pageable
     * @see Page
     */
    Page<Relation> findAll(String query, Pageable pageable);

    /**
     * Exports all Relations matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Relations matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Relations in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Relation.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated families for given Relation id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Family instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Family> findAssociatedFamilies(Integer id, Pageable pageable);

}