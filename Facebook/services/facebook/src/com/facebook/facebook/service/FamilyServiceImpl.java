/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.Family;


/**
 * ServiceImpl object for domain model class Family.
 *
 * @see Family
 */
@Service("facebook.FamilyService")
@Validated
@EntityService(entityClass = Family.class, serviceId = "facebook")
public class FamilyServiceImpl implements FamilyService {

    private static final Logger LOGGER = LoggerFactory.getLogger(FamilyServiceImpl.class);


    @Autowired
    @Qualifier("facebook.FamilyDao")
    private WMGenericDao<Family, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Family, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public Family create(Family family) {
        LOGGER.debug("Creating a new Family with information: {}", family);

        Family familyCreated = this.wmGenericDao.create(family);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(familyCreated);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Family getById(Integer familyId) {
        LOGGER.debug("Finding Family by id: {}", familyId);
        return this.wmGenericDao.findById(familyId);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Family findById(Integer familyId) {
        LOGGER.debug("Finding Family by id: {}", familyId);
        try {
            return this.wmGenericDao.findById(familyId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Family found with id: {}", familyId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public List<Family> findByMultipleIds(List<Integer> familyIds, boolean orderedReturn) {
        LOGGER.debug("Finding Families by ids: {}", familyIds);

        return this.wmGenericDao.findByMultipleIds(familyIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "facebookTransactionManager")
    @Override
    public Family update(Family family) {
        LOGGER.debug("Updating Family with information: {}", family);

        this.wmGenericDao.update(family);
        this.wmGenericDao.refresh(family);

        return family;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public Family partialUpdate(Integer familyId, Map<String, Object>familyPatch) {
        LOGGER.debug("Partially Updating the Family with id: {}", familyId);

        Family family = getById(familyId);

        try {
            ObjectReader familyReader = this.objectMapper.reader().forType(Family.class).withValueToUpdate(family);
            family = familyReader.readValue(this.objectMapper.writeValueAsString(familyPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", familyPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        family = update(family);

        return family;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public Family delete(Integer familyId) {
        LOGGER.debug("Deleting Family with id: {}", familyId);
        Family deleted = this.wmGenericDao.findById(familyId);
        if (deleted == null) {
            LOGGER.debug("No Family found with id: {}", familyId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Family.class.getSimpleName(), familyId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public void delete(Family family) {
        LOGGER.debug("Deleting Family with {}", family);
        this.wmGenericDao.delete(family);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Family> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Families");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Family> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Families");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service facebook for table Family to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service facebook for table Family to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}