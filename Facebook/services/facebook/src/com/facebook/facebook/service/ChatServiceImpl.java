/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.Chat;
import com.facebook.facebook.Messages;


/**
 * ServiceImpl object for domain model class Chat.
 *
 * @see Chat
 */
@Service("facebook.ChatService")
@Validated
@EntityService(entityClass = Chat.class, serviceId = "facebook")
public class ChatServiceImpl implements ChatService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ChatServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("facebook.MessagesService")
    private MessagesService messagesService;

    @Autowired
    @Qualifier("facebook.ChatDao")
    private WMGenericDao<Chat, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Chat, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public Chat create(Chat chat) {
        LOGGER.debug("Creating a new Chat with information: {}", chat);

        Chat chatCreated = this.wmGenericDao.create(chat);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(chatCreated);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Chat getById(Integer chatId) {
        LOGGER.debug("Finding Chat by id: {}", chatId);
        return this.wmGenericDao.findById(chatId);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Chat findById(Integer chatId) {
        LOGGER.debug("Finding Chat by id: {}", chatId);
        try {
            return this.wmGenericDao.findById(chatId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Chat found with id: {}", chatId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public List<Chat> findByMultipleIds(List<Integer> chatIds, boolean orderedReturn) {
        LOGGER.debug("Finding Chats by ids: {}", chatIds);

        return this.wmGenericDao.findByMultipleIds(chatIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Chat getByUser1IdAndUser2Id(Integer user1Id, Integer user2Id) {
        Map<String, Object> user1IdAndUser2IdMap = new HashMap<>();
        user1IdAndUser2IdMap.put("user1Id", user1Id);
        user1IdAndUser2IdMap.put("user2Id", user2Id);

        LOGGER.debug("Finding Chat by unique keys: {}", user1IdAndUser2IdMap);
        return this.wmGenericDao.findByUniqueKey(user1IdAndUser2IdMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "facebookTransactionManager")
    @Override
    public Chat update(Chat chat) {
        LOGGER.debug("Updating Chat with information: {}", chat);

        this.wmGenericDao.update(chat);
        this.wmGenericDao.refresh(chat);

        return chat;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public Chat partialUpdate(Integer chatId, Map<String, Object>chatPatch) {
        LOGGER.debug("Partially Updating the Chat with id: {}", chatId);

        Chat chat = getById(chatId);

        try {
            ObjectReader chatReader = this.objectMapper.reader().forType(Chat.class).withValueToUpdate(chat);
            chat = chatReader.readValue(this.objectMapper.writeValueAsString(chatPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", chatPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        chat = update(chat);

        return chat;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public Chat delete(Integer chatId) {
        LOGGER.debug("Deleting Chat with id: {}", chatId);
        Chat deleted = this.wmGenericDao.findById(chatId);
        if (deleted == null) {
            LOGGER.debug("No Chat found with id: {}", chatId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Chat.class.getSimpleName(), chatId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public void delete(Chat chat) {
        LOGGER.debug("Deleting Chat with {}", chat);
        this.wmGenericDao.delete(chat);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Chat> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Chats");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Chat> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Chats");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service facebook for table Chat to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service facebook for table Chat to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Messages> findAssociatedMessageses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated messageses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("chat.id = '" + id + "'");

        return messagesService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service MessagesService instance
     */
    protected void setMessagesService(MessagesService service) {
        this.messagesService = service;
    }

}