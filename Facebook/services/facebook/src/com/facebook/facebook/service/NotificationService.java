/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.Notification;

/**
 * Service object for domain model class {@link Notification}.
 */
public interface NotificationService {

    /**
     * Creates a new Notification. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Notification if any.
     *
     * @param notification Details of the Notification to be created; value cannot be null.
     * @return The newly created Notification.
     */
    Notification create(@Valid Notification notification);


	/**
     * Returns Notification by given id if exists.
     *
     * @param notificationId The id of the Notification to get; value cannot be null.
     * @return Notification associated with the given notificationId.
	 * @throws EntityNotFoundException If no Notification is found.
     */
    Notification getById(Integer notificationId);

    /**
     * Find and return the Notification by given id if exists, returns null otherwise.
     *
     * @param notificationId The id of the Notification to get; value cannot be null.
     * @return Notification associated with the given notificationId.
     */
    Notification findById(Integer notificationId);

	/**
     * Find and return the list of Notifications by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param notificationIds The id's of the Notification to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Notifications associated with the given notificationIds.
     */
    List<Notification> findByMultipleIds(List<Integer> notificationIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Notification. It replaces all fields of the existing Notification with the given notification.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Notification if any.
     *
     * @param notification The details of the Notification to be updated; value cannot be null.
     * @return The updated Notification.
     * @throws EntityNotFoundException if no Notification is found with given input.
     */
    Notification update(@Valid Notification notification);


    /**
     * Partially updates the details of an existing Notification. It updates only the
     * fields of the existing Notification which are passed in the notificationPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Notification if any.
     *
     * @param notificationId The id of the Notification to be deleted; value cannot be null.
     * @param notificationPatch The partial data of Notification which is supposed to be updated; value cannot be null.
     * @return The updated Notification.
     * @throws EntityNotFoundException if no Notification is found with given input.
     */
    Notification partialUpdate(Integer notificationId, Map<String, Object> notificationPatch);

    /**
     * Deletes an existing Notification with the given id.
     *
     * @param notificationId The id of the Notification to be deleted; value cannot be null.
     * @return The deleted Notification.
     * @throws EntityNotFoundException if no Notification found with the given id.
     */
    Notification delete(Integer notificationId);

    /**
     * Deletes an existing Notification with the given object.
     *
     * @param notification The instance of the Notification to be deleted; value cannot be null.
     */
    void delete(Notification notification);

    /**
     * Find all Notifications matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Notifications.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Notification> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Notifications matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Notifications.
     *
     * @see Pageable
     * @see Page
     */
    Page<Notification> findAll(String query, Pageable pageable);

    /**
     * Exports all Notifications matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Notifications matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Notifications in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Notification.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}