/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.Working;


/**
 * ServiceImpl object for domain model class Working.
 *
 * @see Working
 */
@Service("facebook.WorkingService")
@Validated
@EntityService(entityClass = Working.class, serviceId = "facebook")
public class WorkingServiceImpl implements WorkingService {

    private static final Logger LOGGER = LoggerFactory.getLogger(WorkingServiceImpl.class);


    @Autowired
    @Qualifier("facebook.WorkingDao")
    private WMGenericDao<Working, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Working, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public Working create(Working working) {
        LOGGER.debug("Creating a new Working with information: {}", working);

        Working workingCreated = this.wmGenericDao.create(working);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(workingCreated);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Working getById(Integer workingId) {
        LOGGER.debug("Finding Working by id: {}", workingId);
        return this.wmGenericDao.findById(workingId);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Working findById(Integer workingId) {
        LOGGER.debug("Finding Working by id: {}", workingId);
        try {
            return this.wmGenericDao.findById(workingId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Working found with id: {}", workingId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public List<Working> findByMultipleIds(List<Integer> workingIds, boolean orderedReturn) {
        LOGGER.debug("Finding Workings by ids: {}", workingIds);

        return this.wmGenericDao.findByMultipleIds(workingIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "facebookTransactionManager")
    @Override
    public Working update(Working working) {
        LOGGER.debug("Updating Working with information: {}", working);

        this.wmGenericDao.update(working);
        this.wmGenericDao.refresh(working);

        return working;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public Working partialUpdate(Integer workingId, Map<String, Object>workingPatch) {
        LOGGER.debug("Partially Updating the Working with id: {}", workingId);

        Working working = getById(workingId);

        try {
            ObjectReader workingReader = this.objectMapper.reader().forType(Working.class).withValueToUpdate(working);
            working = workingReader.readValue(this.objectMapper.writeValueAsString(workingPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", workingPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        working = update(working);

        return working;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public Working delete(Integer workingId) {
        LOGGER.debug("Deleting Working with id: {}", workingId);
        Working deleted = this.wmGenericDao.findById(workingId);
        if (deleted == null) {
            LOGGER.debug("No Working found with id: {}", workingId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Working.class.getSimpleName(), workingId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public void delete(Working working) {
        LOGGER.debug("Deleting Working with {}", working);
        this.wmGenericDao.delete(working);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Working> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Workings");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Working> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Workings");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service facebook for table Working to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service facebook for table Working to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}