/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.Education;
import com.facebook.facebook.EducationType;


/**
 * ServiceImpl object for domain model class EducationType.
 *
 * @see EducationType
 */
@Service("facebook.EducationTypeService")
@Validated
@EntityService(entityClass = EducationType.class, serviceId = "facebook")
public class EducationTypeServiceImpl implements EducationTypeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EducationTypeServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("facebook.EducationService")
    private EducationService educationService;

    @Autowired
    @Qualifier("facebook.EducationTypeDao")
    private WMGenericDao<EducationType, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<EducationType, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public EducationType create(EducationType educationType) {
        LOGGER.debug("Creating a new EducationType with information: {}", educationType);

        EducationType educationTypeCreated = this.wmGenericDao.create(educationType);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(educationTypeCreated);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public EducationType getById(Integer educationtypeId) {
        LOGGER.debug("Finding EducationType by id: {}", educationtypeId);
        return this.wmGenericDao.findById(educationtypeId);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public EducationType findById(Integer educationtypeId) {
        LOGGER.debug("Finding EducationType by id: {}", educationtypeId);
        try {
            return this.wmGenericDao.findById(educationtypeId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No EducationType found with id: {}", educationtypeId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public List<EducationType> findByMultipleIds(List<Integer> educationtypeIds, boolean orderedReturn) {
        LOGGER.debug("Finding EducationTypes by ids: {}", educationtypeIds);

        return this.wmGenericDao.findByMultipleIds(educationtypeIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "facebookTransactionManager")
    @Override
    public EducationType update(EducationType educationType) {
        LOGGER.debug("Updating EducationType with information: {}", educationType);

        this.wmGenericDao.update(educationType);
        this.wmGenericDao.refresh(educationType);

        return educationType;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public EducationType partialUpdate(Integer educationtypeId, Map<String, Object>educationTypePatch) {
        LOGGER.debug("Partially Updating the EducationType with id: {}", educationtypeId);

        EducationType educationType = getById(educationtypeId);

        try {
            ObjectReader educationTypeReader = this.objectMapper.reader().forType(EducationType.class).withValueToUpdate(educationType);
            educationType = educationTypeReader.readValue(this.objectMapper.writeValueAsString(educationTypePatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", educationTypePatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        educationType = update(educationType);

        return educationType;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public EducationType delete(Integer educationtypeId) {
        LOGGER.debug("Deleting EducationType with id: {}", educationtypeId);
        EducationType deleted = this.wmGenericDao.findById(educationtypeId);
        if (deleted == null) {
            LOGGER.debug("No EducationType found with id: {}", educationtypeId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), EducationType.class.getSimpleName(), educationtypeId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public void delete(EducationType educationType) {
        LOGGER.debug("Deleting EducationType with {}", educationType);
        this.wmGenericDao.delete(educationType);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<EducationType> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EducationTypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<EducationType> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EducationTypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service facebook for table EducationType to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service facebook for table EducationType to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Education> findAssociatedEducations(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated educations");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("educationType.id = '" + id + "'");

        return educationService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service EducationService instance
     */
    protected void setEducationService(EducationService service) {
        this.educationService = service;
    }

}