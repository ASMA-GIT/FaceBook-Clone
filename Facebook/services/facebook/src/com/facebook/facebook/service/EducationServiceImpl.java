/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.Education;


/**
 * ServiceImpl object for domain model class Education.
 *
 * @see Education
 */
@Service("facebook.EducationService")
@Validated
@EntityService(entityClass = Education.class, serviceId = "facebook")
public class EducationServiceImpl implements EducationService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EducationServiceImpl.class);


    @Autowired
    @Qualifier("facebook.EducationDao")
    private WMGenericDao<Education, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Education, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public Education create(Education education) {
        LOGGER.debug("Creating a new Education with information: {}", education);

        Education educationCreated = this.wmGenericDao.create(education);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(educationCreated);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Education getById(Integer educationId) {
        LOGGER.debug("Finding Education by id: {}", educationId);
        return this.wmGenericDao.findById(educationId);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Education findById(Integer educationId) {
        LOGGER.debug("Finding Education by id: {}", educationId);
        try {
            return this.wmGenericDao.findById(educationId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Education found with id: {}", educationId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public List<Education> findByMultipleIds(List<Integer> educationIds, boolean orderedReturn) {
        LOGGER.debug("Finding Educations by ids: {}", educationIds);

        return this.wmGenericDao.findByMultipleIds(educationIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "facebookTransactionManager")
    @Override
    public Education update(Education education) {
        LOGGER.debug("Updating Education with information: {}", education);

        this.wmGenericDao.update(education);
        this.wmGenericDao.refresh(education);

        return education;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public Education partialUpdate(Integer educationId, Map<String, Object>educationPatch) {
        LOGGER.debug("Partially Updating the Education with id: {}", educationId);

        Education education = getById(educationId);

        try {
            ObjectReader educationReader = this.objectMapper.reader().forType(Education.class).withValueToUpdate(education);
            education = educationReader.readValue(this.objectMapper.writeValueAsString(educationPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", educationPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        education = update(education);

        return education;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public Education delete(Integer educationId) {
        LOGGER.debug("Deleting Education with id: {}", educationId);
        Education deleted = this.wmGenericDao.findById(educationId);
        if (deleted == null) {
            LOGGER.debug("No Education found with id: {}", educationId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Education.class.getSimpleName(), educationId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public void delete(Education education) {
        LOGGER.debug("Deleting Education with {}", education);
        this.wmGenericDao.delete(education);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Education> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Educations");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Education> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Educations");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service facebook for table Education to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service facebook for table Education to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}