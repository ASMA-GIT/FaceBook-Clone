/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.Comment;
import com.facebook.facebook.LikedPost;
import com.facebook.facebook.Post;
import com.facebook.facebook.SavedPost;


/**
 * ServiceImpl object for domain model class Post.
 *
 * @see Post
 */
@Service("facebook.PostService")
@Validated
@EntityService(entityClass = Post.class, serviceId = "facebook")
public class PostServiceImpl implements PostService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PostServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("facebook.LikedPostService")
    private LikedPostService likedPostService;

    @Lazy
    @Autowired
    @Qualifier("facebook.SavedPostService")
    private SavedPostService savedPostService;

    @Lazy
    @Autowired
    @Qualifier("facebook.CommentService")
    private CommentService commentService;

    @Autowired
    @Qualifier("facebook.PostDao")
    private WMGenericDao<Post, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Post, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public Post create(Post postInstance) {
        LOGGER.debug("Creating a new Post with information: {}", postInstance);

        Post postInstanceCreated = this.wmGenericDao.create(postInstance);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(postInstanceCreated);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Post getById(Integer postId) {
        LOGGER.debug("Finding Post by id: {}", postId);
        return this.wmGenericDao.findById(postId);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Post findById(Integer postId) {
        LOGGER.debug("Finding Post by id: {}", postId);
        try {
            return this.wmGenericDao.findById(postId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Post found with id: {}", postId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public List<Post> findByMultipleIds(List<Integer> postIds, boolean orderedReturn) {
        LOGGER.debug("Finding Posts by ids: {}", postIds);

        return this.wmGenericDao.findByMultipleIds(postIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "facebookTransactionManager")
    @Override
    public Post update(Post postInstance) {
        LOGGER.debug("Updating Post with information: {}", postInstance);

        this.wmGenericDao.update(postInstance);
        this.wmGenericDao.refresh(postInstance);

        return postInstance;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public Post partialUpdate(Integer postId, Map<String, Object>postInstancePatch) {
        LOGGER.debug("Partially Updating the Post with id: {}", postId);

        Post postInstance = getById(postId);

        try {
            ObjectReader postInstanceReader = this.objectMapper.reader().forType(Post.class).withValueToUpdate(postInstance);
            postInstance = postInstanceReader.readValue(this.objectMapper.writeValueAsString(postInstancePatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", postInstancePatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        postInstance = update(postInstance);

        return postInstance;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public Post delete(Integer postId) {
        LOGGER.debug("Deleting Post with id: {}", postId);
        Post deleted = this.wmGenericDao.findById(postId);
        if (deleted == null) {
            LOGGER.debug("No Post found with id: {}", postId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Post.class.getSimpleName(), postId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public void delete(Post postInstance) {
        LOGGER.debug("Deleting Post with {}", postInstance);
        this.wmGenericDao.delete(postInstance);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Post> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Posts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Post> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Posts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service facebook for table Post to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service facebook for table Post to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Comment> findAssociatedComments(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated comments");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("post.id = '" + id + "'");

        return commentService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<LikedPost> findAssociatedLikedPosts(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated likedPosts");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("post.id = '" + id + "'");

        return likedPostService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<SavedPost> findAssociatedSavedPosts(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated savedPosts");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("post.id = '" + id + "'");

        return savedPostService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service LikedPostService instance
     */
    protected void setLikedPostService(LikedPostService service) {
        this.likedPostService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service SavedPostService instance
     */
    protected void setSavedPostService(SavedPostService service) {
        this.savedPostService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service CommentService instance
     */
    protected void setCommentService(CommentService service) {
        this.commentService = service;
    }

}