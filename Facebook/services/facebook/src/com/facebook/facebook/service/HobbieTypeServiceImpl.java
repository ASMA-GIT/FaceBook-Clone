/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.HobbieType;
import com.facebook.facebook.Hobbies;


/**
 * ServiceImpl object for domain model class HobbieType.
 *
 * @see HobbieType
 */
@Service("facebook.HobbieTypeService")
@Validated
@EntityService(entityClass = HobbieType.class, serviceId = "facebook")
public class HobbieTypeServiceImpl implements HobbieTypeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(HobbieTypeServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("facebook.HobbiesService")
    private HobbiesService hobbiesService;

    @Autowired
    @Qualifier("facebook.HobbieTypeDao")
    private WMGenericDao<HobbieType, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<HobbieType, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public HobbieType create(HobbieType hobbieType) {
        LOGGER.debug("Creating a new HobbieType with information: {}", hobbieType);

        HobbieType hobbieTypeCreated = this.wmGenericDao.create(hobbieType);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(hobbieTypeCreated);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public HobbieType getById(Integer hobbietypeId) {
        LOGGER.debug("Finding HobbieType by id: {}", hobbietypeId);
        return this.wmGenericDao.findById(hobbietypeId);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public HobbieType findById(Integer hobbietypeId) {
        LOGGER.debug("Finding HobbieType by id: {}", hobbietypeId);
        try {
            return this.wmGenericDao.findById(hobbietypeId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No HobbieType found with id: {}", hobbietypeId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public List<HobbieType> findByMultipleIds(List<Integer> hobbietypeIds, boolean orderedReturn) {
        LOGGER.debug("Finding HobbieTypes by ids: {}", hobbietypeIds);

        return this.wmGenericDao.findByMultipleIds(hobbietypeIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public HobbieType getByHobbieName(String hobbieName) {
        Map<String, Object> hobbieNameMap = new HashMap<>();
        hobbieNameMap.put("hobbieName", hobbieName);

        LOGGER.debug("Finding HobbieType by unique keys: {}", hobbieNameMap);
        return this.wmGenericDao.findByUniqueKey(hobbieNameMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "facebookTransactionManager")
    @Override
    public HobbieType update(HobbieType hobbieType) {
        LOGGER.debug("Updating HobbieType with information: {}", hobbieType);

        this.wmGenericDao.update(hobbieType);
        this.wmGenericDao.refresh(hobbieType);

        return hobbieType;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public HobbieType partialUpdate(Integer hobbietypeId, Map<String, Object>hobbieTypePatch) {
        LOGGER.debug("Partially Updating the HobbieType with id: {}", hobbietypeId);

        HobbieType hobbieType = getById(hobbietypeId);

        try {
            ObjectReader hobbieTypeReader = this.objectMapper.reader().forType(HobbieType.class).withValueToUpdate(hobbieType);
            hobbieType = hobbieTypeReader.readValue(this.objectMapper.writeValueAsString(hobbieTypePatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", hobbieTypePatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        hobbieType = update(hobbieType);

        return hobbieType;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public HobbieType delete(Integer hobbietypeId) {
        LOGGER.debug("Deleting HobbieType with id: {}", hobbietypeId);
        HobbieType deleted = this.wmGenericDao.findById(hobbietypeId);
        if (deleted == null) {
            LOGGER.debug("No HobbieType found with id: {}", hobbietypeId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), HobbieType.class.getSimpleName(), hobbietypeId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public void delete(HobbieType hobbieType) {
        LOGGER.debug("Deleting HobbieType with {}", hobbieType);
        this.wmGenericDao.delete(hobbieType);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<HobbieType> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all HobbieTypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<HobbieType> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all HobbieTypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service facebook for table HobbieType to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service facebook for table HobbieType to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Hobbies> findAssociatedHobbieses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated hobbieses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("hobbieType.id = '" + id + "'");

        return hobbiesService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service HobbiesService instance
     */
    protected void setHobbiesService(HobbiesService service) {
        this.hobbiesService = service;
    }

}