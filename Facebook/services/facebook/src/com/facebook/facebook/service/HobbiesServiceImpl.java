/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.Hobbies;


/**
 * ServiceImpl object for domain model class Hobbies.
 *
 * @see Hobbies
 */
@Service("facebook.HobbiesService")
@Validated
@EntityService(entityClass = Hobbies.class, serviceId = "facebook")
public class HobbiesServiceImpl implements HobbiesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(HobbiesServiceImpl.class);


    @Autowired
    @Qualifier("facebook.HobbiesDao")
    private WMGenericDao<Hobbies, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Hobbies, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public Hobbies create(Hobbies hobbies) {
        LOGGER.debug("Creating a new Hobbies with information: {}", hobbies);

        Hobbies hobbiesCreated = this.wmGenericDao.create(hobbies);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(hobbiesCreated);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Hobbies getById(Integer hobbiesId) {
        LOGGER.debug("Finding Hobbies by id: {}", hobbiesId);
        return this.wmGenericDao.findById(hobbiesId);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Hobbies findById(Integer hobbiesId) {
        LOGGER.debug("Finding Hobbies by id: {}", hobbiesId);
        try {
            return this.wmGenericDao.findById(hobbiesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Hobbies found with id: {}", hobbiesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public List<Hobbies> findByMultipleIds(List<Integer> hobbiesIds, boolean orderedReturn) {
        LOGGER.debug("Finding Hobbies by ids: {}", hobbiesIds);

        return this.wmGenericDao.findByMultipleIds(hobbiesIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Hobbies getByUserIdAndHobbieId(Integer userId, Integer hobbieId) {
        Map<String, Object> userIdAndHobbieIdMap = new HashMap<>();
        userIdAndHobbieIdMap.put("userId", userId);
        userIdAndHobbieIdMap.put("hobbieId", hobbieId);

        LOGGER.debug("Finding Hobbies by unique keys: {}", userIdAndHobbieIdMap);
        return this.wmGenericDao.findByUniqueKey(userIdAndHobbieIdMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "facebookTransactionManager")
    @Override
    public Hobbies update(Hobbies hobbies) {
        LOGGER.debug("Updating Hobbies with information: {}", hobbies);

        this.wmGenericDao.update(hobbies);
        this.wmGenericDao.refresh(hobbies);

        return hobbies;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public Hobbies partialUpdate(Integer hobbiesId, Map<String, Object>hobbiesPatch) {
        LOGGER.debug("Partially Updating the Hobbies with id: {}", hobbiesId);

        Hobbies hobbies = getById(hobbiesId);

        try {
            ObjectReader hobbiesReader = this.objectMapper.reader().forType(Hobbies.class).withValueToUpdate(hobbies);
            hobbies = hobbiesReader.readValue(this.objectMapper.writeValueAsString(hobbiesPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", hobbiesPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        hobbies = update(hobbies);

        return hobbies;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public Hobbies delete(Integer hobbiesId) {
        LOGGER.debug("Deleting Hobbies with id: {}", hobbiesId);
        Hobbies deleted = this.wmGenericDao.findById(hobbiesId);
        if (deleted == null) {
            LOGGER.debug("No Hobbies found with id: {}", hobbiesId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Hobbies.class.getSimpleName(), hobbiesId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public void delete(Hobbies hobbies) {
        LOGGER.debug("Deleting Hobbies with {}", hobbies);
        this.wmGenericDao.delete(hobbies);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Hobbies> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Hobbies");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Hobbies> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Hobbies");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service facebook for table Hobbies to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service facebook for table Hobbies to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}