/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.Hobbies;

/**
 * Service object for domain model class {@link Hobbies}.
 */
public interface HobbiesService {

    /**
     * Creates a new Hobbies. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Hobbies if any.
     *
     * @param hobbies Details of the Hobbies to be created; value cannot be null.
     * @return The newly created Hobbies.
     */
    Hobbies create(@Valid Hobbies hobbies);


	/**
     * Returns Hobbies by given id if exists.
     *
     * @param hobbiesId The id of the Hobbies to get; value cannot be null.
     * @return Hobbies associated with the given hobbiesId.
	 * @throws EntityNotFoundException If no Hobbies is found.
     */
    Hobbies getById(Integer hobbiesId);

    /**
     * Find and return the Hobbies by given id if exists, returns null otherwise.
     *
     * @param hobbiesId The id of the Hobbies to get; value cannot be null.
     * @return Hobbies associated with the given hobbiesId.
     */
    Hobbies findById(Integer hobbiesId);

	/**
     * Find and return the list of Hobbies by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param hobbiesIds The id's of the Hobbies to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Hobbies associated with the given hobbiesIds.
     */
    List<Hobbies> findByMultipleIds(List<Integer> hobbiesIds, boolean orderedReturn);

    /**
     * Find and return the Hobbies for given userId  andhobbieId  if exists.
     *
     * @param userId value of userId; value cannot be null.
     * @param hobbieId value of hobbieId; value cannot be null.
     * @return Hobbies associated with the given inputs.
     * @throws EntityNotFoundException if no matching Hobbies found.
     */
    Hobbies getByUserIdAndHobbieId(Integer userId, Integer hobbieId);

    /**
     * Updates the details of an existing Hobbies. It replaces all fields of the existing Hobbies with the given hobbies.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Hobbies if any.
     *
     * @param hobbies The details of the Hobbies to be updated; value cannot be null.
     * @return The updated Hobbies.
     * @throws EntityNotFoundException if no Hobbies is found with given input.
     */
    Hobbies update(@Valid Hobbies hobbies);


    /**
     * Partially updates the details of an existing Hobbies. It updates only the
     * fields of the existing Hobbies which are passed in the hobbiesPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Hobbies if any.
     *
     * @param hobbiesId The id of the Hobbies to be deleted; value cannot be null.
     * @param hobbiesPatch The partial data of Hobbies which is supposed to be updated; value cannot be null.
     * @return The updated Hobbies.
     * @throws EntityNotFoundException if no Hobbies is found with given input.
     */
    Hobbies partialUpdate(Integer hobbiesId, Map<String, Object> hobbiesPatch);

    /**
     * Deletes an existing Hobbies with the given id.
     *
     * @param hobbiesId The id of the Hobbies to be deleted; value cannot be null.
     * @return The deleted Hobbies.
     * @throws EntityNotFoundException if no Hobbies found with the given id.
     */
    Hobbies delete(Integer hobbiesId);

    /**
     * Deletes an existing Hobbies with the given object.
     *
     * @param hobbies The instance of the Hobbies to be deleted; value cannot be null.
     */
    void delete(Hobbies hobbies);

    /**
     * Find all Hobbies matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Hobbies.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Hobbies> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Hobbies matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Hobbies.
     *
     * @see Pageable
     * @see Page
     */
    Page<Hobbies> findAll(String query, Pageable pageable);

    /**
     * Exports all Hobbies matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Hobbies matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Hobbies in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Hobbies.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}