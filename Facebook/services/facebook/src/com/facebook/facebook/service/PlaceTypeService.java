/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.PlaceType;
import com.facebook.facebook.PlacesLived;

/**
 * Service object for domain model class {@link PlaceType}.
 */
public interface PlaceTypeService {

    /**
     * Creates a new PlaceType. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PlaceType if any.
     *
     * @param placeType Details of the PlaceType to be created; value cannot be null.
     * @return The newly created PlaceType.
     */
    PlaceType create(@Valid PlaceType placeType);


	/**
     * Returns PlaceType by given id if exists.
     *
     * @param placetypeId The id of the PlaceType to get; value cannot be null.
     * @return PlaceType associated with the given placetypeId.
	 * @throws EntityNotFoundException If no PlaceType is found.
     */
    PlaceType getById(Integer placetypeId);

    /**
     * Find and return the PlaceType by given id if exists, returns null otherwise.
     *
     * @param placetypeId The id of the PlaceType to get; value cannot be null.
     * @return PlaceType associated with the given placetypeId.
     */
    PlaceType findById(Integer placetypeId);

	/**
     * Find and return the list of PlaceTypes by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param placetypeIds The id's of the PlaceType to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return PlaceTypes associated with the given placetypeIds.
     */
    List<PlaceType> findByMultipleIds(List<Integer> placetypeIds, boolean orderedReturn);

    /**
     * Find and return the PlaceType for given cityType  if exists.
     *
     * @param cityType value of cityType; value cannot be null.
     * @return PlaceType associated with the given inputs.
     * @throws EntityNotFoundException if no matching PlaceType found.
     */
    PlaceType getByCityType(String cityType);

    /**
     * Updates the details of an existing PlaceType. It replaces all fields of the existing PlaceType with the given placeType.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PlaceType if any.
     *
     * @param placeType The details of the PlaceType to be updated; value cannot be null.
     * @return The updated PlaceType.
     * @throws EntityNotFoundException if no PlaceType is found with given input.
     */
    PlaceType update(@Valid PlaceType placeType);


    /**
     * Partially updates the details of an existing PlaceType. It updates only the
     * fields of the existing PlaceType which are passed in the placeTypePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PlaceType if any.
     *
     * @param placetypeId The id of the PlaceType to be deleted; value cannot be null.
     * @param placeTypePatch The partial data of PlaceType which is supposed to be updated; value cannot be null.
     * @return The updated PlaceType.
     * @throws EntityNotFoundException if no PlaceType is found with given input.
     */
    PlaceType partialUpdate(Integer placetypeId, Map<String, Object> placeTypePatch);

    /**
     * Deletes an existing PlaceType with the given id.
     *
     * @param placetypeId The id of the PlaceType to be deleted; value cannot be null.
     * @return The deleted PlaceType.
     * @throws EntityNotFoundException if no PlaceType found with the given id.
     */
    PlaceType delete(Integer placetypeId);

    /**
     * Deletes an existing PlaceType with the given object.
     *
     * @param placeType The instance of the PlaceType to be deleted; value cannot be null.
     */
    void delete(PlaceType placeType);

    /**
     * Find all PlaceTypes matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PlaceTypes.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<PlaceType> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all PlaceTypes matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PlaceTypes.
     *
     * @see Pageable
     * @see Page
     */
    Page<PlaceType> findAll(String query, Pageable pageable);

    /**
     * Exports all PlaceTypes matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all PlaceTypes matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the PlaceTypes in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the PlaceType.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated placesLiveds for given PlaceType id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated PlacesLived instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<PlacesLived> findAssociatedPlacesLiveds(Integer id, Pageable pageable);

}