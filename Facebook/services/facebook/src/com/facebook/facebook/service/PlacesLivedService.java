/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.PlacesLived;

/**
 * Service object for domain model class {@link PlacesLived}.
 */
public interface PlacesLivedService {

    /**
     * Creates a new PlacesLived. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PlacesLived if any.
     *
     * @param placesLived Details of the PlacesLived to be created; value cannot be null.
     * @return The newly created PlacesLived.
     */
    PlacesLived create(@Valid PlacesLived placesLived);


	/**
     * Returns PlacesLived by given id if exists.
     *
     * @param placeslivedId The id of the PlacesLived to get; value cannot be null.
     * @return PlacesLived associated with the given placeslivedId.
	 * @throws EntityNotFoundException If no PlacesLived is found.
     */
    PlacesLived getById(Integer placeslivedId);

    /**
     * Find and return the PlacesLived by given id if exists, returns null otherwise.
     *
     * @param placeslivedId The id of the PlacesLived to get; value cannot be null.
     * @return PlacesLived associated with the given placeslivedId.
     */
    PlacesLived findById(Integer placeslivedId);

	/**
     * Find and return the list of PlacesLiveds by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param placeslivedIds The id's of the PlacesLived to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return PlacesLiveds associated with the given placeslivedIds.
     */
    List<PlacesLived> findByMultipleIds(List<Integer> placeslivedIds, boolean orderedReturn);


    /**
     * Updates the details of an existing PlacesLived. It replaces all fields of the existing PlacesLived with the given placesLived.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PlacesLived if any.
     *
     * @param placesLived The details of the PlacesLived to be updated; value cannot be null.
     * @return The updated PlacesLived.
     * @throws EntityNotFoundException if no PlacesLived is found with given input.
     */
    PlacesLived update(@Valid PlacesLived placesLived);


    /**
     * Partially updates the details of an existing PlacesLived. It updates only the
     * fields of the existing PlacesLived which are passed in the placesLivedPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PlacesLived if any.
     *
     * @param placeslivedId The id of the PlacesLived to be deleted; value cannot be null.
     * @param placesLivedPatch The partial data of PlacesLived which is supposed to be updated; value cannot be null.
     * @return The updated PlacesLived.
     * @throws EntityNotFoundException if no PlacesLived is found with given input.
     */
    PlacesLived partialUpdate(Integer placeslivedId, Map<String, Object> placesLivedPatch);

    /**
     * Deletes an existing PlacesLived with the given id.
     *
     * @param placeslivedId The id of the PlacesLived to be deleted; value cannot be null.
     * @return The deleted PlacesLived.
     * @throws EntityNotFoundException if no PlacesLived found with the given id.
     */
    PlacesLived delete(Integer placeslivedId);

    /**
     * Deletes an existing PlacesLived with the given object.
     *
     * @param placesLived The instance of the PlacesLived to be deleted; value cannot be null.
     */
    void delete(PlacesLived placesLived);

    /**
     * Find all PlacesLiveds matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PlacesLiveds.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<PlacesLived> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all PlacesLiveds matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PlacesLiveds.
     *
     * @see Pageable
     * @see Page
     */
    Page<PlacesLived> findAll(String query, Pageable pageable);

    /**
     * Exports all PlacesLiveds matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all PlacesLiveds matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the PlacesLiveds in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the PlacesLived.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}