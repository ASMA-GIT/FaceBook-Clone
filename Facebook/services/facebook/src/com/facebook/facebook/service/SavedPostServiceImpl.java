/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.SavedPost;


/**
 * ServiceImpl object for domain model class SavedPost.
 *
 * @see SavedPost
 */
@Service("facebook.SavedPostService")
@Validated
@EntityService(entityClass = SavedPost.class, serviceId = "facebook")
public class SavedPostServiceImpl implements SavedPostService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SavedPostServiceImpl.class);


    @Autowired
    @Qualifier("facebook.SavedPostDao")
    private WMGenericDao<SavedPost, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<SavedPost, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public SavedPost create(SavedPost savedPost) {
        LOGGER.debug("Creating a new SavedPost with information: {}", savedPost);

        SavedPost savedPostCreated = this.wmGenericDao.create(savedPost);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(savedPostCreated);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public SavedPost getById(Integer savedpostId) {
        LOGGER.debug("Finding SavedPost by id: {}", savedpostId);
        return this.wmGenericDao.findById(savedpostId);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public SavedPost findById(Integer savedpostId) {
        LOGGER.debug("Finding SavedPost by id: {}", savedpostId);
        try {
            return this.wmGenericDao.findById(savedpostId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No SavedPost found with id: {}", savedpostId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public List<SavedPost> findByMultipleIds(List<Integer> savedpostIds, boolean orderedReturn) {
        LOGGER.debug("Finding SavedPosts by ids: {}", savedpostIds);

        return this.wmGenericDao.findByMultipleIds(savedpostIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public SavedPost getByPostIdAndSavedUserId(Integer postId, Integer savedUserId) {
        Map<String, Object> postIdAndSavedUserIdMap = new HashMap<>();
        postIdAndSavedUserIdMap.put("postId", postId);
        postIdAndSavedUserIdMap.put("savedUserId", savedUserId);

        LOGGER.debug("Finding SavedPost by unique keys: {}", postIdAndSavedUserIdMap);
        return this.wmGenericDao.findByUniqueKey(postIdAndSavedUserIdMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "facebookTransactionManager")
    @Override
    public SavedPost update(SavedPost savedPost) {
        LOGGER.debug("Updating SavedPost with information: {}", savedPost);

        this.wmGenericDao.update(savedPost);
        this.wmGenericDao.refresh(savedPost);

        return savedPost;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public SavedPost partialUpdate(Integer savedpostId, Map<String, Object>savedPostPatch) {
        LOGGER.debug("Partially Updating the SavedPost with id: {}", savedpostId);

        SavedPost savedPost = getById(savedpostId);

        try {
            ObjectReader savedPostReader = this.objectMapper.reader().forType(SavedPost.class).withValueToUpdate(savedPost);
            savedPost = savedPostReader.readValue(this.objectMapper.writeValueAsString(savedPostPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", savedPostPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        savedPost = update(savedPost);

        return savedPost;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public SavedPost delete(Integer savedpostId) {
        LOGGER.debug("Deleting SavedPost with id: {}", savedpostId);
        SavedPost deleted = this.wmGenericDao.findById(savedpostId);
        if (deleted == null) {
            LOGGER.debug("No SavedPost found with id: {}", savedpostId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), SavedPost.class.getSimpleName(), savedpostId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public void delete(SavedPost savedPost) {
        LOGGER.debug("Deleting SavedPost with {}", savedPost);
        this.wmGenericDao.delete(savedPost);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<SavedPost> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SavedPosts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<SavedPost> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SavedPosts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service facebook for table SavedPost to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service facebook for table SavedPost to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}