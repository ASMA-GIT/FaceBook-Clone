/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.Post;
import com.facebook.facebook.PostType;

/**
 * Service object for domain model class {@link PostType}.
 */
public interface PostTypeService {

    /**
     * Creates a new PostType. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PostType if any.
     *
     * @param postTypeInstance Details of the PostType to be created; value cannot be null.
     * @return The newly created PostType.
     */
    PostType create(@Valid PostType postTypeInstance);


	/**
     * Returns PostType by given id if exists.
     *
     * @param posttypeId The id of the PostType to get; value cannot be null.
     * @return PostType associated with the given posttypeId.
	 * @throws EntityNotFoundException If no PostType is found.
     */
    PostType getById(Integer posttypeId);

    /**
     * Find and return the PostType by given id if exists, returns null otherwise.
     *
     * @param posttypeId The id of the PostType to get; value cannot be null.
     * @return PostType associated with the given posttypeId.
     */
    PostType findById(Integer posttypeId);

	/**
     * Find and return the list of PostTypes by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param posttypeIds The id's of the PostType to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return PostTypes associated with the given posttypeIds.
     */
    List<PostType> findByMultipleIds(List<Integer> posttypeIds, boolean orderedReturn);

    /**
     * Find and return the PostType for given postType  if exists.
     *
     * @param postType value of postType; value cannot be null.
     * @return PostType associated with the given inputs.
     * @throws EntityNotFoundException if no matching PostType found.
     */
    PostType getByPostType(String postType);

    /**
     * Updates the details of an existing PostType. It replaces all fields of the existing PostType with the given postTypeInstance.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PostType if any.
     *
     * @param postTypeInstance The details of the PostType to be updated; value cannot be null.
     * @return The updated PostType.
     * @throws EntityNotFoundException if no PostType is found with given input.
     */
    PostType update(@Valid PostType postTypeInstance);


    /**
     * Partially updates the details of an existing PostType. It updates only the
     * fields of the existing PostType which are passed in the postTypeInstancePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PostType if any.
     *
     * @param posttypeId The id of the PostType to be deleted; value cannot be null.
     * @param postTypeInstancePatch The partial data of PostType which is supposed to be updated; value cannot be null.
     * @return The updated PostType.
     * @throws EntityNotFoundException if no PostType is found with given input.
     */
    PostType partialUpdate(Integer posttypeId, Map<String, Object> postTypeInstancePatch);

    /**
     * Deletes an existing PostType with the given id.
     *
     * @param posttypeId The id of the PostType to be deleted; value cannot be null.
     * @return The deleted PostType.
     * @throws EntityNotFoundException if no PostType found with the given id.
     */
    PostType delete(Integer posttypeId);

    /**
     * Deletes an existing PostType with the given object.
     *
     * @param postTypeInstance The instance of the PostType to be deleted; value cannot be null.
     */
    void delete(PostType postTypeInstance);

    /**
     * Find all PostTypes matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PostTypes.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<PostType> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all PostTypes matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PostTypes.
     *
     * @see Pageable
     * @see Page
     */
    Page<PostType> findAll(String query, Pageable pageable);

    /**
     * Exports all PostTypes matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all PostTypes matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the PostTypes in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the PostType.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated posts for given PostType id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Post instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Post> findAssociatedPosts(Integer id, Pageable pageable);

}