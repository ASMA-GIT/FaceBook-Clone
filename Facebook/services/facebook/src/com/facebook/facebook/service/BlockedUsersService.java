/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.BlockedUsers;

/**
 * Service object for domain model class {@link BlockedUsers}.
 */
public interface BlockedUsersService {

    /**
     * Creates a new BlockedUsers. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on BlockedUsers if any.
     *
     * @param blockedUsers Details of the BlockedUsers to be created; value cannot be null.
     * @return The newly created BlockedUsers.
     */
    BlockedUsers create(@Valid BlockedUsers blockedUsers);


	/**
     * Returns BlockedUsers by given id if exists.
     *
     * @param blockedusersId The id of the BlockedUsers to get; value cannot be null.
     * @return BlockedUsers associated with the given blockedusersId.
	 * @throws EntityNotFoundException If no BlockedUsers is found.
     */
    BlockedUsers getById(Integer blockedusersId);

    /**
     * Find and return the BlockedUsers by given id if exists, returns null otherwise.
     *
     * @param blockedusersId The id of the BlockedUsers to get; value cannot be null.
     * @return BlockedUsers associated with the given blockedusersId.
     */
    BlockedUsers findById(Integer blockedusersId);

	/**
     * Find and return the list of BlockedUsers by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param blockedusersIds The id's of the BlockedUsers to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return BlockedUsers associated with the given blockedusersIds.
     */
    List<BlockedUsers> findByMultipleIds(List<Integer> blockedusersIds, boolean orderedReturn);


    /**
     * Updates the details of an existing BlockedUsers. It replaces all fields of the existing BlockedUsers with the given blockedUsers.
     *
     * This method overrides the input field values using Server side or database managed properties defined on BlockedUsers if any.
     *
     * @param blockedUsers The details of the BlockedUsers to be updated; value cannot be null.
     * @return The updated BlockedUsers.
     * @throws EntityNotFoundException if no BlockedUsers is found with given input.
     */
    BlockedUsers update(@Valid BlockedUsers blockedUsers);


    /**
     * Partially updates the details of an existing BlockedUsers. It updates only the
     * fields of the existing BlockedUsers which are passed in the blockedUsersPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on BlockedUsers if any.
     *
     * @param blockedusersId The id of the BlockedUsers to be deleted; value cannot be null.
     * @param blockedUsersPatch The partial data of BlockedUsers which is supposed to be updated; value cannot be null.
     * @return The updated BlockedUsers.
     * @throws EntityNotFoundException if no BlockedUsers is found with given input.
     */
    BlockedUsers partialUpdate(Integer blockedusersId, Map<String, Object> blockedUsersPatch);

    /**
     * Deletes an existing BlockedUsers with the given id.
     *
     * @param blockedusersId The id of the BlockedUsers to be deleted; value cannot be null.
     * @return The deleted BlockedUsers.
     * @throws EntityNotFoundException if no BlockedUsers found with the given id.
     */
    BlockedUsers delete(Integer blockedusersId);

    /**
     * Deletes an existing BlockedUsers with the given object.
     *
     * @param blockedUsers The instance of the BlockedUsers to be deleted; value cannot be null.
     */
    void delete(BlockedUsers blockedUsers);

    /**
     * Find all BlockedUsers matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching BlockedUsers.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<BlockedUsers> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all BlockedUsers matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching BlockedUsers.
     *
     * @see Pageable
     * @see Page
     */
    Page<BlockedUsers> findAll(String query, Pageable pageable);

    /**
     * Exports all BlockedUsers matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all BlockedUsers matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the BlockedUsers in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the BlockedUsers.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}