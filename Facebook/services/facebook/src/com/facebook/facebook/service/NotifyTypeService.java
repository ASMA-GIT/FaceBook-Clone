/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.Notification;
import com.facebook.facebook.NotifyType;

/**
 * Service object for domain model class {@link NotifyType}.
 */
public interface NotifyTypeService {

    /**
     * Creates a new NotifyType. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on NotifyType if any.
     *
     * @param notifyType Details of the NotifyType to be created; value cannot be null.
     * @return The newly created NotifyType.
     */
    NotifyType create(@Valid NotifyType notifyType);


	/**
     * Returns NotifyType by given id if exists.
     *
     * @param notifytypeId The id of the NotifyType to get; value cannot be null.
     * @return NotifyType associated with the given notifytypeId.
	 * @throws EntityNotFoundException If no NotifyType is found.
     */
    NotifyType getById(Integer notifytypeId);

    /**
     * Find and return the NotifyType by given id if exists, returns null otherwise.
     *
     * @param notifytypeId The id of the NotifyType to get; value cannot be null.
     * @return NotifyType associated with the given notifytypeId.
     */
    NotifyType findById(Integer notifytypeId);

	/**
     * Find and return the list of NotifyTypes by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param notifytypeIds The id's of the NotifyType to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return NotifyTypes associated with the given notifytypeIds.
     */
    List<NotifyType> findByMultipleIds(List<Integer> notifytypeIds, boolean orderedReturn);

    /**
     * Find and return the NotifyType for given notiType  if exists.
     *
     * @param notiType value of notiType; value cannot be null.
     * @return NotifyType associated with the given inputs.
     * @throws EntityNotFoundException if no matching NotifyType found.
     */
    NotifyType getByNotiType(String notiType);

    /**
     * Updates the details of an existing NotifyType. It replaces all fields of the existing NotifyType with the given notifyType.
     *
     * This method overrides the input field values using Server side or database managed properties defined on NotifyType if any.
     *
     * @param notifyType The details of the NotifyType to be updated; value cannot be null.
     * @return The updated NotifyType.
     * @throws EntityNotFoundException if no NotifyType is found with given input.
     */
    NotifyType update(@Valid NotifyType notifyType);


    /**
     * Partially updates the details of an existing NotifyType. It updates only the
     * fields of the existing NotifyType which are passed in the notifyTypePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on NotifyType if any.
     *
     * @param notifytypeId The id of the NotifyType to be deleted; value cannot be null.
     * @param notifyTypePatch The partial data of NotifyType which is supposed to be updated; value cannot be null.
     * @return The updated NotifyType.
     * @throws EntityNotFoundException if no NotifyType is found with given input.
     */
    NotifyType partialUpdate(Integer notifytypeId, Map<String, Object> notifyTypePatch);

    /**
     * Deletes an existing NotifyType with the given id.
     *
     * @param notifytypeId The id of the NotifyType to be deleted; value cannot be null.
     * @return The deleted NotifyType.
     * @throws EntityNotFoundException if no NotifyType found with the given id.
     */
    NotifyType delete(Integer notifytypeId);

    /**
     * Deletes an existing NotifyType with the given object.
     *
     * @param notifyType The instance of the NotifyType to be deleted; value cannot be null.
     */
    void delete(NotifyType notifyType);

    /**
     * Find all NotifyTypes matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching NotifyTypes.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<NotifyType> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all NotifyTypes matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching NotifyTypes.
     *
     * @see Pageable
     * @see Page
     */
    Page<NotifyType> findAll(String query, Pageable pageable);

    /**
     * Exports all NotifyTypes matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all NotifyTypes matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the NotifyTypes in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the NotifyType.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated notifications for given NotifyType id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Notification instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Notification> findAssociatedNotifications(Integer id, Pageable pageable);

}