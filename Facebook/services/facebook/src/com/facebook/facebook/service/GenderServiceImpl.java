/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.Gender;
import com.facebook.facebook.Users;


/**
 * ServiceImpl object for domain model class Gender.
 *
 * @see Gender
 */
@Service("facebook.GenderService")
@Validated
@EntityService(entityClass = Gender.class, serviceId = "facebook")
public class GenderServiceImpl implements GenderService {

    private static final Logger LOGGER = LoggerFactory.getLogger(GenderServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("facebook.UsersService")
    private UsersService usersService;

    @Autowired
    @Qualifier("facebook.GenderDao")
    private WMGenericDao<Gender, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Gender, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public Gender create(Gender gender) {
        LOGGER.debug("Creating a new Gender with information: {}", gender);

        Gender genderCreated = this.wmGenericDao.create(gender);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(genderCreated);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Gender getById(Integer genderId) {
        LOGGER.debug("Finding Gender by id: {}", genderId);
        return this.wmGenericDao.findById(genderId);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Gender findById(Integer genderId) {
        LOGGER.debug("Finding Gender by id: {}", genderId);
        try {
            return this.wmGenericDao.findById(genderId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Gender found with id: {}", genderId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public List<Gender> findByMultipleIds(List<Integer> genderIds, boolean orderedReturn) {
        LOGGER.debug("Finding Genders by ids: {}", genderIds);

        return this.wmGenericDao.findByMultipleIds(genderIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "facebookTransactionManager")
    @Override
    public Gender update(Gender gender) {
        LOGGER.debug("Updating Gender with information: {}", gender);

        this.wmGenericDao.update(gender);
        this.wmGenericDao.refresh(gender);

        return gender;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public Gender partialUpdate(Integer genderId, Map<String, Object>genderPatch) {
        LOGGER.debug("Partially Updating the Gender with id: {}", genderId);

        Gender gender = getById(genderId);

        try {
            ObjectReader genderReader = this.objectMapper.reader().forType(Gender.class).withValueToUpdate(gender);
            gender = genderReader.readValue(this.objectMapper.writeValueAsString(genderPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", genderPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        gender = update(gender);

        return gender;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public Gender delete(Integer genderId) {
        LOGGER.debug("Deleting Gender with id: {}", genderId);
        Gender deleted = this.wmGenericDao.findById(genderId);
        if (deleted == null) {
            LOGGER.debug("No Gender found with id: {}", genderId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Gender.class.getSimpleName(), genderId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public void delete(Gender gender) {
        LOGGER.debug("Deleting Gender with {}", gender);
        this.wmGenericDao.delete(gender);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Gender> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Genders");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Gender> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Genders");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service facebook for table Gender to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service facebook for table Gender to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Users> findAssociatedUserses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated userses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("gender.id = '" + id + "'");

        return usersService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service UsersService instance
     */
    protected void setUsersService(UsersService service) {
        this.usersService = service;
    }

}