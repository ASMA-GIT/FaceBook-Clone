/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.Education;

/**
 * Service object for domain model class {@link Education}.
 */
public interface EducationService {

    /**
     * Creates a new Education. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Education if any.
     *
     * @param education Details of the Education to be created; value cannot be null.
     * @return The newly created Education.
     */
    Education create(@Valid Education education);


	/**
     * Returns Education by given id if exists.
     *
     * @param educationId The id of the Education to get; value cannot be null.
     * @return Education associated with the given educationId.
	 * @throws EntityNotFoundException If no Education is found.
     */
    Education getById(Integer educationId);

    /**
     * Find and return the Education by given id if exists, returns null otherwise.
     *
     * @param educationId The id of the Education to get; value cannot be null.
     * @return Education associated with the given educationId.
     */
    Education findById(Integer educationId);

	/**
     * Find and return the list of Educations by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param educationIds The id's of the Education to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Educations associated with the given educationIds.
     */
    List<Education> findByMultipleIds(List<Integer> educationIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Education. It replaces all fields of the existing Education with the given education.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Education if any.
     *
     * @param education The details of the Education to be updated; value cannot be null.
     * @return The updated Education.
     * @throws EntityNotFoundException if no Education is found with given input.
     */
    Education update(@Valid Education education);


    /**
     * Partially updates the details of an existing Education. It updates only the
     * fields of the existing Education which are passed in the educationPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Education if any.
     *
     * @param educationId The id of the Education to be deleted; value cannot be null.
     * @param educationPatch The partial data of Education which is supposed to be updated; value cannot be null.
     * @return The updated Education.
     * @throws EntityNotFoundException if no Education is found with given input.
     */
    Education partialUpdate(Integer educationId, Map<String, Object> educationPatch);

    /**
     * Deletes an existing Education with the given id.
     *
     * @param educationId The id of the Education to be deleted; value cannot be null.
     * @return The deleted Education.
     * @throws EntityNotFoundException if no Education found with the given id.
     */
    Education delete(Integer educationId);

    /**
     * Deletes an existing Education with the given object.
     *
     * @param education The instance of the Education to be deleted; value cannot be null.
     */
    void delete(Education education);

    /**
     * Find all Educations matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Educations.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Education> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Educations matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Educations.
     *
     * @see Pageable
     * @see Page
     */
    Page<Education> findAll(String query, Pageable pageable);

    /**
     * Exports all Educations matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Educations matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Educations in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Education.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}