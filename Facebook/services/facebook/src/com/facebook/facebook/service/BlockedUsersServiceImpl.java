/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.BlockedUsers;


/**
 * ServiceImpl object for domain model class BlockedUsers.
 *
 * @see BlockedUsers
 */
@Service("facebook.BlockedUsersService")
@Validated
@EntityService(entityClass = BlockedUsers.class, serviceId = "facebook")
public class BlockedUsersServiceImpl implements BlockedUsersService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BlockedUsersServiceImpl.class);


    @Autowired
    @Qualifier("facebook.BlockedUsersDao")
    private WMGenericDao<BlockedUsers, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<BlockedUsers, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public BlockedUsers create(BlockedUsers blockedUsers) {
        LOGGER.debug("Creating a new BlockedUsers with information: {}", blockedUsers);

        BlockedUsers blockedUsersCreated = this.wmGenericDao.create(blockedUsers);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(blockedUsersCreated);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public BlockedUsers getById(Integer blockedusersId) {
        LOGGER.debug("Finding BlockedUsers by id: {}", blockedusersId);
        return this.wmGenericDao.findById(blockedusersId);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public BlockedUsers findById(Integer blockedusersId) {
        LOGGER.debug("Finding BlockedUsers by id: {}", blockedusersId);
        try {
            return this.wmGenericDao.findById(blockedusersId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No BlockedUsers found with id: {}", blockedusersId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public List<BlockedUsers> findByMultipleIds(List<Integer> blockedusersIds, boolean orderedReturn) {
        LOGGER.debug("Finding BlockedUsers by ids: {}", blockedusersIds);

        return this.wmGenericDao.findByMultipleIds(blockedusersIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "facebookTransactionManager")
    @Override
    public BlockedUsers update(BlockedUsers blockedUsers) {
        LOGGER.debug("Updating BlockedUsers with information: {}", blockedUsers);

        this.wmGenericDao.update(blockedUsers);
        this.wmGenericDao.refresh(blockedUsers);

        return blockedUsers;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public BlockedUsers partialUpdate(Integer blockedusersId, Map<String, Object>blockedUsersPatch) {
        LOGGER.debug("Partially Updating the BlockedUsers with id: {}", blockedusersId);

        BlockedUsers blockedUsers = getById(blockedusersId);

        try {
            ObjectReader blockedUsersReader = this.objectMapper.reader().forType(BlockedUsers.class).withValueToUpdate(blockedUsers);
            blockedUsers = blockedUsersReader.readValue(this.objectMapper.writeValueAsString(blockedUsersPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", blockedUsersPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        blockedUsers = update(blockedUsers);

        return blockedUsers;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public BlockedUsers delete(Integer blockedusersId) {
        LOGGER.debug("Deleting BlockedUsers with id: {}", blockedusersId);
        BlockedUsers deleted = this.wmGenericDao.findById(blockedusersId);
        if (deleted == null) {
            LOGGER.debug("No BlockedUsers found with id: {}", blockedusersId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), BlockedUsers.class.getSimpleName(), blockedusersId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public void delete(BlockedUsers blockedUsers) {
        LOGGER.debug("Deleting BlockedUsers with {}", blockedUsers);
        this.wmGenericDao.delete(blockedUsers);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<BlockedUsers> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all BlockedUsers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<BlockedUsers> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all BlockedUsers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service facebook for table BlockedUsers to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service facebook for table BlockedUsers to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}