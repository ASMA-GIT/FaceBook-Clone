/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.PlaceType;
import com.facebook.facebook.PlacesLived;


/**
 * ServiceImpl object for domain model class PlaceType.
 *
 * @see PlaceType
 */
@Service("facebook.PlaceTypeService")
@Validated
@EntityService(entityClass = PlaceType.class, serviceId = "facebook")
public class PlaceTypeServiceImpl implements PlaceTypeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PlaceTypeServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("facebook.PlacesLivedService")
    private PlacesLivedService placesLivedService;

    @Autowired
    @Qualifier("facebook.PlaceTypeDao")
    private WMGenericDao<PlaceType, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<PlaceType, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public PlaceType create(PlaceType placeType) {
        LOGGER.debug("Creating a new PlaceType with information: {}", placeType);

        PlaceType placeTypeCreated = this.wmGenericDao.create(placeType);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(placeTypeCreated);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public PlaceType getById(Integer placetypeId) {
        LOGGER.debug("Finding PlaceType by id: {}", placetypeId);
        return this.wmGenericDao.findById(placetypeId);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public PlaceType findById(Integer placetypeId) {
        LOGGER.debug("Finding PlaceType by id: {}", placetypeId);
        try {
            return this.wmGenericDao.findById(placetypeId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No PlaceType found with id: {}", placetypeId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public List<PlaceType> findByMultipleIds(List<Integer> placetypeIds, boolean orderedReturn) {
        LOGGER.debug("Finding PlaceTypes by ids: {}", placetypeIds);

        return this.wmGenericDao.findByMultipleIds(placetypeIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public PlaceType getByCityType(String cityType) {
        Map<String, Object> cityTypeMap = new HashMap<>();
        cityTypeMap.put("cityType", cityType);

        LOGGER.debug("Finding PlaceType by unique keys: {}", cityTypeMap);
        return this.wmGenericDao.findByUniqueKey(cityTypeMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "facebookTransactionManager")
    @Override
    public PlaceType update(PlaceType placeType) {
        LOGGER.debug("Updating PlaceType with information: {}", placeType);

        this.wmGenericDao.update(placeType);
        this.wmGenericDao.refresh(placeType);

        return placeType;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public PlaceType partialUpdate(Integer placetypeId, Map<String, Object>placeTypePatch) {
        LOGGER.debug("Partially Updating the PlaceType with id: {}", placetypeId);

        PlaceType placeType = getById(placetypeId);

        try {
            ObjectReader placeTypeReader = this.objectMapper.reader().forType(PlaceType.class).withValueToUpdate(placeType);
            placeType = placeTypeReader.readValue(this.objectMapper.writeValueAsString(placeTypePatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", placeTypePatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        placeType = update(placeType);

        return placeType;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public PlaceType delete(Integer placetypeId) {
        LOGGER.debug("Deleting PlaceType with id: {}", placetypeId);
        PlaceType deleted = this.wmGenericDao.findById(placetypeId);
        if (deleted == null) {
            LOGGER.debug("No PlaceType found with id: {}", placetypeId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), PlaceType.class.getSimpleName(), placetypeId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public void delete(PlaceType placeType) {
        LOGGER.debug("Deleting PlaceType with {}", placeType);
        this.wmGenericDao.delete(placeType);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<PlaceType> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PlaceTypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<PlaceType> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PlaceTypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service facebook for table PlaceType to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service facebook for table PlaceType to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<PlacesLived> findAssociatedPlacesLiveds(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated placesLiveds");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("placeType.id = '" + id + "'");

        return placesLivedService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service PlacesLivedService instance
     */
    protected void setPlacesLivedService(PlacesLivedService service) {
        this.placesLivedService = service;
    }

}