/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.facebook.facebook.BlockedUsers;
import com.facebook.facebook.Chat;
import com.facebook.facebook.Comment;
import com.facebook.facebook.Education;
import com.facebook.facebook.Events;
import com.facebook.facebook.Family;
import com.facebook.facebook.Feedback;
import com.facebook.facebook.Friend;
import com.facebook.facebook.Hobbies;
import com.facebook.facebook.LikedPost;
import com.facebook.facebook.Messages;
import com.facebook.facebook.Notification;
import com.facebook.facebook.PlacesLived;
import com.facebook.facebook.Post;
import com.facebook.facebook.SavedPost;
import com.facebook.facebook.Users;
import com.facebook.facebook.Working;


/**
 * ServiceImpl object for domain model class Users.
 *
 * @see Users
 */
@Service("facebook.UsersService")
@Validated
@EntityService(entityClass = Users.class, serviceId = "facebook")
public class UsersServiceImpl implements UsersService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UsersServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("facebook.LikedPostService")
    private LikedPostService likedPostService;

    @Lazy
    @Autowired
    @Qualifier("facebook.PlacesLivedService")
    private PlacesLivedService placesLivedService;

    @Lazy
    @Autowired
    @Qualifier("facebook.SavedPostService")
    private SavedPostService savedPostService;

    @Lazy
    @Autowired
    @Qualifier("facebook.HobbiesService")
    private HobbiesService hobbiesService;

    @Lazy
    @Autowired
    @Qualifier("facebook.PostService")
    private PostService postService;

    @Lazy
    @Autowired
    @Qualifier("facebook.EducationService")
    private EducationService educationService;

    @Lazy
    @Autowired
    @Qualifier("facebook.NotificationService")
    private NotificationService notificationService;

    @Lazy
    @Autowired
    @Qualifier("facebook.FeedbackService")
    private FeedbackService feedbackService;

    @Lazy
    @Autowired
    @Qualifier("facebook.WorkingService")
    private WorkingService workingService;

    @Lazy
    @Autowired
    @Qualifier("facebook.BlockedUsersService")
    private BlockedUsersService blockedUsersService;

    @Lazy
    @Autowired
    @Qualifier("facebook.ChatService")
    private ChatService chatService;

    @Lazy
    @Autowired
    @Qualifier("facebook.CommentService")
    private CommentService commentService;

    @Lazy
    @Autowired
    @Qualifier("facebook.FamilyService")
    private FamilyService familyService;

    @Lazy
    @Autowired
    @Qualifier("facebook.FriendService")
    private FriendService friendService;

    @Lazy
    @Autowired
    @Qualifier("facebook.MessagesService")
    private MessagesService messagesService;

    @Lazy
    @Autowired
    @Qualifier("facebook.EventsService")
    private EventsService eventsService;

    @Autowired
    @Qualifier("facebook.UsersDao")
    private WMGenericDao<Users, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Users, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public Users create(Users users) {
        LOGGER.debug("Creating a new Users with information: {}", users);

        Users usersCreated = this.wmGenericDao.create(users);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(usersCreated);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Users getById(Integer usersId) {
        LOGGER.debug("Finding Users by id: {}", usersId);
        return this.wmGenericDao.findById(usersId);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Users findById(Integer usersId) {
        LOGGER.debug("Finding Users by id: {}", usersId);
        try {
            return this.wmGenericDao.findById(usersId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Users found with id: {}", usersId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public List<Users> findByMultipleIds(List<Integer> usersIds, boolean orderedReturn) {
        LOGGER.debug("Finding Users by ids: {}", usersIds);

        return this.wmGenericDao.findByMultipleIds(usersIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Users getByEmail(String email) {
        Map<String, Object> emailMap = new HashMap<>();
        emailMap.put("email", email);

        LOGGER.debug("Finding Users by unique keys: {}", emailMap);
        return this.wmGenericDao.findByUniqueKey(emailMap);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Users getByPhNo(String phNo) {
        Map<String, Object> phNoMap = new HashMap<>();
        phNoMap.put("phNo", phNo);

        LOGGER.debug("Finding Users by unique keys: {}", phNoMap);
        return this.wmGenericDao.findByUniqueKey(phNoMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "facebookTransactionManager")
    @Override
    public Users update(Users users) {
        LOGGER.debug("Updating Users with information: {}", users);

        this.wmGenericDao.update(users);
        this.wmGenericDao.refresh(users);

        return users;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public Users partialUpdate(Integer usersId, Map<String, Object>usersPatch) {
        LOGGER.debug("Partially Updating the Users with id: {}", usersId);

        Users users = getById(usersId);

        try {
            ObjectReader usersReader = this.objectMapper.reader().forType(Users.class).withValueToUpdate(users);
            users = usersReader.readValue(this.objectMapper.writeValueAsString(usersPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", usersPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        users = update(users);

        return users;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public Users delete(Integer usersId) {
        LOGGER.debug("Deleting Users with id: {}", usersId);
        Users deleted = this.wmGenericDao.findById(usersId);
        if (deleted == null) {
            LOGGER.debug("No Users found with id: {}", usersId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Users.class.getSimpleName(), usersId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "facebookTransactionManager")
    @Override
    public void delete(Users users) {
        LOGGER.debug("Deleting Users with {}", users);
        this.wmGenericDao.delete(users);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Users> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Users");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Users> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Users");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service facebook for table Users to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service facebook for table Users to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Hobbies> findAssociatedHobbieses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated hobbieses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("users.id = '" + id + "'");

        return hobbiesService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<BlockedUsers> findAssociatedBlockedUsersesForUserId(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated blockedUsersesForUserId");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("usersByUserId.id = '" + id + "'");

        return blockedUsersService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<BlockedUsers> findAssociatedBlockedUsersesForBlockedUserId(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated blockedUsersesForBlockedUserId");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("usersByBlockedUserId.id = '" + id + "'");

        return blockedUsersService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Chat> findAssociatedChatsForUser1Id(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated chatsForUser1Id");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("usersByUser1Id.id = '" + id + "'");

        return chatService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Chat> findAssociatedChatsForUser2Id(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated chatsForUser2Id");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("usersByUser2Id.id = '" + id + "'");

        return chatService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Comment> findAssociatedComments(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated comments");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("users.id = '" + id + "'");

        return commentService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Education> findAssociatedEducations(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated educations");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("users.id = '" + id + "'");

        return educationService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Events> findAssociatedEventses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated eventses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("users.id = '" + id + "'");

        return eventsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Family> findAssociatedFamilies(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated families");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("users.id = '" + id + "'");

        return familyService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Feedback> findAssociatedFeedbacks(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated feedbacks");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("users.id = '" + id + "'");

        return feedbackService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Friend> findAssociatedFriendsForUser1Id(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated friendsForUser1Id");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("usersByUser1Id.id = '" + id + "'");

        return friendService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Friend> findAssociatedFriendsForUser2Id(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated friendsForUser2Id");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("usersByUser2Id.id = '" + id + "'");

        return friendService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<LikedPost> findAssociatedLikedPosts(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated likedPosts");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("users.id = '" + id + "'");

        return likedPostService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Messages> findAssociatedMessagesesForSenderId(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated messagesesForSenderId");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("usersBySenderId.id = '" + id + "'");

        return messagesService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Messages> findAssociatedMessagesesForReceiverId(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated messagesesForReceiverId");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("usersByReceiverId.id = '" + id + "'");

        return messagesService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Notification> findAssociatedNotificationsForSenderId(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated notificationsForSenderId");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("usersBySenderId.id = '" + id + "'");

        return notificationService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Notification> findAssociatedNotificationsForReceiverId(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated notificationsForReceiverId");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("usersByReceiverId.id = '" + id + "'");

        return notificationService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<PlacesLived> findAssociatedPlacesLiveds(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated placesLiveds");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("users.id = '" + id + "'");

        return placesLivedService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Post> findAssociatedPostsForFromUserId(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated postsForFromUserId");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("usersByFromUserId.id = '" + id + "'");

        return postService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Post> findAssociatedPostsForWithUserId(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated postsForWithUserId");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("usersByWithUserId.id = '" + id + "'");

        return postService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<SavedPost> findAssociatedSavedPosts(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated savedPosts");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("users.id = '" + id + "'");

        return savedPostService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "facebookTransactionManager")
    @Override
    public Page<Working> findAssociatedWorkings(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated workings");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("users.id = '" + id + "'");

        return workingService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service LikedPostService instance
     */
    protected void setLikedPostService(LikedPostService service) {
        this.likedPostService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service PlacesLivedService instance
     */
    protected void setPlacesLivedService(PlacesLivedService service) {
        this.placesLivedService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service SavedPostService instance
     */
    protected void setSavedPostService(SavedPostService service) {
        this.savedPostService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service HobbiesService instance
     */
    protected void setHobbiesService(HobbiesService service) {
        this.hobbiesService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service PostService instance
     */
    protected void setPostService(PostService service) {
        this.postService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service EducationService instance
     */
    protected void setEducationService(EducationService service) {
        this.educationService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service NotificationService instance
     */
    protected void setNotificationService(NotificationService service) {
        this.notificationService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service FeedbackService instance
     */
    protected void setFeedbackService(FeedbackService service) {
        this.feedbackService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service WorkingService instance
     */
    protected void setWorkingService(WorkingService service) {
        this.workingService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service BlockedUsersService instance
     */
    protected void setBlockedUsersService(BlockedUsersService service) {
        this.blockedUsersService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service ChatService instance
     */
    protected void setChatService(ChatService service) {
        this.chatService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service CommentService instance
     */
    protected void setCommentService(CommentService service) {
        this.commentService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service FamilyService instance
     */
    protected void setFamilyService(FamilyService service) {
        this.familyService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service FriendService instance
     */
    protected void setFriendService(FriendService service) {
        this.friendService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service MessagesService instance
     */
    protected void setMessagesService(MessagesService service) {
        this.messagesService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service EventsService instance
     */
    protected void setEventsService(EventsService service) {
        this.eventsService = service;
    }

}