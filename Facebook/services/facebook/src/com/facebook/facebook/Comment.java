/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Comment generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`comment`")
public class Comment implements Serializable {

    private Integer id;
    private int commenteeId;
    private int postId;
    private Timestamp createdAt;
    private String comment;
    private String column6;
    private Users users;
    private Post post;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`commentee_id`", nullable = false, scale = 0, precision = 10)
    public int getCommenteeId() {
        return this.commenteeId;
    }

    public void setCommenteeId(int commenteeId) {
        this.commenteeId = commenteeId;
    }

    @Column(name = "`post_id`", nullable = false, scale = 0, precision = 10)
    public int getPostId() {
        return this.postId;
    }

    public void setPostId(int postId) {
        this.postId = postId;
    }

    @Column(name = "`created_at`", nullable = false)
    public Timestamp getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Timestamp createdAt) {
        this.createdAt = createdAt;
    }

    @Column(name = "`Comment`", nullable = false, length = 255)
    public String getComment() {
        return this.comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }

    @Column(name = "`COLUMN6`", nullable = true, length = 255)
    public String getColumn6() {
        return this.column6;
    }

    public void setColumn6(String column6) {
        this.column6 = column6;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`commentee_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`comment_ibfk_1`"))
    @Fetch(FetchMode.JOIN)
    public Users getUsers() {
        return this.users;
    }

    public void setUsers(Users users) {
        if(users != null) {
            this.commenteeId = users.getId();
        }

        this.users = users;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`post_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`comment_ibfk_2`"))
    @Fetch(FetchMode.JOIN)
    public Post getPost() {
        return this.post;
    }

    public void setPost(Post post) {
        if(post != null) {
            this.postId = post.getId();
        }

        this.post = post;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Comment)) return false;
        final Comment commentInstance = (Comment) o;
        return Objects.equals(getId(), commentInstance.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}