/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.facebook.facebook.PlaceType;
import com.facebook.facebook.PlacesLived;
import com.facebook.facebook.service.PlaceTypeService;


/**
 * Controller object for domain model class PlaceType.
 * @see PlaceType
 */
@RestController("facebook.PlaceTypeController")
@Api(value = "PlaceTypeController", description = "Exposes APIs to work with PlaceType resource.")
@RequestMapping("/facebook/PlaceType")
public class PlaceTypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PlaceTypeController.class);

    @Autowired
	@Qualifier("facebook.PlaceTypeService")
	private PlaceTypeService placeTypeService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new PlaceType instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PlaceType createPlaceType(@RequestBody PlaceType placeType) {
		LOGGER.debug("Create PlaceType with information: {}" , placeType);

		placeType = placeTypeService.create(placeType);
		LOGGER.debug("Created PlaceType with information: {}" , placeType);

	    return placeType;
	}

    @ApiOperation(value = "Returns the PlaceType instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PlaceType getPlaceType(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting PlaceType with id: {}" , id);

        PlaceType foundPlaceType = placeTypeService.getById(id);
        LOGGER.debug("PlaceType details with id: {}" , foundPlaceType);

        return foundPlaceType;
    }

    @ApiOperation(value = "Updates the PlaceType instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PlaceType editPlaceType(@PathVariable("id") Integer id, @RequestBody PlaceType placeType) {
        LOGGER.debug("Editing PlaceType with id: {}" , placeType.getId());

        placeType.setId(id);
        placeType = placeTypeService.update(placeType);
        LOGGER.debug("PlaceType details with id: {}" , placeType);

        return placeType;
    }
    
    @ApiOperation(value = "Partially updates the PlaceType instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PlaceType patchPlaceType(@PathVariable("id") Integer id, @RequestBody @MapTo(PlaceType.class) Map<String, Object> placeTypePatch) {
        LOGGER.debug("Partially updating PlaceType with id: {}" , id);

        PlaceType placeType = placeTypeService.partialUpdate(id, placeTypePatch);
        LOGGER.debug("PlaceType details after partial update: {}" , placeType);

        return placeType;
    }

    @ApiOperation(value = "Deletes the PlaceType instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePlaceType(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting PlaceType with id: {}" , id);

        PlaceType deletedPlaceType = placeTypeService.delete(id);

        return deletedPlaceType != null;
    }

    @GetMapping(value = "/cityType/{cityType}" )
    @ApiOperation(value = "Returns the matching PlaceType with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PlaceType getByCityType(@PathVariable("cityType") String cityType) {
        LOGGER.debug("Getting PlaceType with uniques key CityType");
        return placeTypeService.getByCityType(cityType);
    }

    /**
     * @deprecated Use {@link #findPlaceTypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PlaceType instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PlaceType> searchPlaceTypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PlaceTypes list by query filter:{}", (Object) queryFilters);
        return placeTypeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PlaceType instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PlaceType> findPlaceTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PlaceTypes list by filter:", query);
        return placeTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PlaceType instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PlaceType> filterPlaceTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PlaceTypes list by filter", query);
        return placeTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPlaceTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return placeTypeService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportPlaceTypesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = PlaceType.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> placeTypeService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of PlaceType instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPlaceTypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PlaceTypes");
		return placeTypeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPlaceTypeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return placeTypeService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/placesLiveds")
    @ApiOperation(value = "Gets the placesLiveds instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PlacesLived> findAssociatedPlacesLiveds(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated placesLiveds");
        return placeTypeService.findAssociatedPlacesLiveds(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PlaceTypeService instance
	 */
	protected void setPlaceTypeService(PlaceTypeService service) {
		this.placeTypeService = service;
	}

}