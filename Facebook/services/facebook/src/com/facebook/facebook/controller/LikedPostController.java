/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.facebook.facebook.LikedPost;
import com.facebook.facebook.service.LikedPostService;


/**
 * Controller object for domain model class LikedPost.
 * @see LikedPost
 */
@RestController("facebook.LikedPostController")
@Api(value = "LikedPostController", description = "Exposes APIs to work with LikedPost resource.")
@RequestMapping("/facebook/LikedPost")
public class LikedPostController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LikedPostController.class);

    @Autowired
	@Qualifier("facebook.LikedPostService")
	private LikedPostService likedPostService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new LikedPost instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LikedPost createLikedPost(@RequestBody LikedPost likedPost) {
		LOGGER.debug("Create LikedPost with information: {}" , likedPost);

		likedPost = likedPostService.create(likedPost);
		LOGGER.debug("Created LikedPost with information: {}" , likedPost);

	    return likedPost;
	}

    @ApiOperation(value = "Returns the LikedPost instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LikedPost getLikedPost(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting LikedPost with id: {}" , id);

        LikedPost foundLikedPost = likedPostService.getById(id);
        LOGGER.debug("LikedPost details with id: {}" , foundLikedPost);

        return foundLikedPost;
    }

    @ApiOperation(value = "Updates the LikedPost instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LikedPost editLikedPost(@PathVariable("id") Integer id, @RequestBody LikedPost likedPost) {
        LOGGER.debug("Editing LikedPost with id: {}" , likedPost.getId());

        likedPost.setId(id);
        likedPost = likedPostService.update(likedPost);
        LOGGER.debug("LikedPost details with id: {}" , likedPost);

        return likedPost;
    }
    
    @ApiOperation(value = "Partially updates the LikedPost instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LikedPost patchLikedPost(@PathVariable("id") Integer id, @RequestBody @MapTo(LikedPost.class) Map<String, Object> likedPostPatch) {
        LOGGER.debug("Partially updating LikedPost with id: {}" , id);

        LikedPost likedPost = likedPostService.partialUpdate(id, likedPostPatch);
        LOGGER.debug("LikedPost details after partial update: {}" , likedPost);

        return likedPost;
    }

    @ApiOperation(value = "Deletes the LikedPost instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLikedPost(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting LikedPost with id: {}" , id);

        LikedPost deletedLikedPost = likedPostService.delete(id);

        return deletedLikedPost != null;
    }

    @GetMapping(value = "/postId-likedUserId" )
    @ApiOperation(value = "Returns the matching LikedPost with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LikedPost getByPostIdAndLikedUserId(@RequestParam("postId") int postId, @RequestParam("likedUserId") int likedUserId) {
        LOGGER.debug("Getting LikedPost with uniques key PostIdAndLikedUserId");
        return likedPostService.getByPostIdAndLikedUserId(postId, likedUserId);
    }

    /**
     * @deprecated Use {@link #findLikedPosts(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of LikedPost instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LikedPost> searchLikedPostsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering LikedPosts list by query filter:{}", (Object) queryFilters);
        return likedPostService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LikedPost instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LikedPost> findLikedPosts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LikedPosts list by filter:", query);
        return likedPostService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LikedPost instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LikedPost> filterLikedPosts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LikedPosts list by filter", query);
        return likedPostService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportLikedPosts(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return likedPostService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportLikedPostsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = LikedPost.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> likedPostService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of LikedPost instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countLikedPosts( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting LikedPosts");
		return likedPostService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getLikedPostAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return likedPostService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LikedPostService instance
	 */
	protected void setLikedPostService(LikedPostService service) {
		this.likedPostService = service;
	}

}