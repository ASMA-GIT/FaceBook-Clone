/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.facebook.facebook.Friend;
import com.facebook.facebook.service.FriendService;


/**
 * Controller object for domain model class Friend.
 * @see Friend
 */
@RestController("facebook.FriendController")
@Api(value = "FriendController", description = "Exposes APIs to work with Friend resource.")
@RequestMapping("/facebook/Friend")
public class FriendController {

    private static final Logger LOGGER = LoggerFactory.getLogger(FriendController.class);

    @Autowired
	@Qualifier("facebook.FriendService")
	private FriendService friendService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Friend instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Friend createFriend(@RequestBody Friend friend) {
		LOGGER.debug("Create Friend with information: {}" , friend);

		friend = friendService.create(friend);
		LOGGER.debug("Created Friend with information: {}" , friend);

	    return friend;
	}

    @ApiOperation(value = "Returns the Friend instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Friend getFriend(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Friend with id: {}" , id);

        Friend foundFriend = friendService.getById(id);
        LOGGER.debug("Friend details with id: {}" , foundFriend);

        return foundFriend;
    }

    @ApiOperation(value = "Updates the Friend instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Friend editFriend(@PathVariable("id") Integer id, @RequestBody Friend friend) {
        LOGGER.debug("Editing Friend with id: {}" , friend.getId());

        friend.setId(id);
        friend = friendService.update(friend);
        LOGGER.debug("Friend details with id: {}" , friend);

        return friend;
    }
    
    @ApiOperation(value = "Partially updates the Friend instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Friend patchFriend(@PathVariable("id") Integer id, @RequestBody @MapTo(Friend.class) Map<String, Object> friendPatch) {
        LOGGER.debug("Partially updating Friend with id: {}" , id);

        Friend friend = friendService.partialUpdate(id, friendPatch);
        LOGGER.debug("Friend details after partial update: {}" , friend);

        return friend;
    }

    @ApiOperation(value = "Deletes the Friend instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteFriend(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Friend with id: {}" , id);

        Friend deletedFriend = friendService.delete(id);

        return deletedFriend != null;
    }

    @GetMapping(value = "/user1Id-user2Id" )
    @ApiOperation(value = "Returns the matching Friend with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Friend getByUser1IdAndUser2Id(@RequestParam("user1Id") int user1Id, @RequestParam("user2Id") int user2Id) {
        LOGGER.debug("Getting Friend with uniques key User1IdAndUser2Id");
        return friendService.getByUser1IdAndUser2Id(user1Id, user2Id);
    }

    /**
     * @deprecated Use {@link #findFriends(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Friend instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Friend> searchFriendsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Friends list by query filter:{}", (Object) queryFilters);
        return friendService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Friend instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Friend> findFriends(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Friends list by filter:", query);
        return friendService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Friend instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Friend> filterFriends(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Friends list by filter", query);
        return friendService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportFriends(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return friendService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportFriendsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Friend.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> friendService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Friend instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countFriends( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Friends");
		return friendService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getFriendAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return friendService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service FriendService instance
	 */
	protected void setFriendService(FriendService service) {
		this.friendService = service;
	}

}