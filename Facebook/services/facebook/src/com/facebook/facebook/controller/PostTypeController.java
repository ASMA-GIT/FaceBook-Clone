/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.facebook.facebook.Post;
import com.facebook.facebook.PostType;
import com.facebook.facebook.service.PostTypeService;


/**
 * Controller object for domain model class PostType.
 * @see PostType
 */
@RestController("facebook.PostTypeController")
@Api(value = "PostTypeController", description = "Exposes APIs to work with PostType resource.")
@RequestMapping("/facebook/PostType")
public class PostTypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PostTypeController.class);

    @Autowired
	@Qualifier("facebook.PostTypeService")
	private PostTypeService postTypeService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new PostType instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PostType createPostType(@RequestBody PostType postTypeInstance) {
		LOGGER.debug("Create PostType with information: {}" , postTypeInstance);

		postTypeInstance = postTypeService.create(postTypeInstance);
		LOGGER.debug("Created PostType with information: {}" , postTypeInstance);

	    return postTypeInstance;
	}

    @ApiOperation(value = "Returns the PostType instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PostType getPostType(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting PostType with id: {}" , id);

        PostType foundPostType = postTypeService.getById(id);
        LOGGER.debug("PostType details with id: {}" , foundPostType);

        return foundPostType;
    }

    @ApiOperation(value = "Updates the PostType instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PostType editPostType(@PathVariable("id") Integer id, @RequestBody PostType postTypeInstance) {
        LOGGER.debug("Editing PostType with id: {}" , postTypeInstance.getId());

        postTypeInstance.setId(id);
        postTypeInstance = postTypeService.update(postTypeInstance);
        LOGGER.debug("PostType details with id: {}" , postTypeInstance);

        return postTypeInstance;
    }
    
    @ApiOperation(value = "Partially updates the PostType instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PostType patchPostType(@PathVariable("id") Integer id, @RequestBody @MapTo(PostType.class) Map<String, Object> postTypeInstancePatch) {
        LOGGER.debug("Partially updating PostType with id: {}" , id);

        PostType postTypeInstance = postTypeService.partialUpdate(id, postTypeInstancePatch);
        LOGGER.debug("PostType details after partial update: {}" , postTypeInstance);

        return postTypeInstance;
    }

    @ApiOperation(value = "Deletes the PostType instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePostType(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting PostType with id: {}" , id);

        PostType deletedPostType = postTypeService.delete(id);

        return deletedPostType != null;
    }

    @GetMapping(value = "/postType/{postType}" )
    @ApiOperation(value = "Returns the matching PostType with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PostType getByPostType(@PathVariable("postType") String postType) {
        LOGGER.debug("Getting PostType with uniques key PostType");
        return postTypeService.getByPostType(postType);
    }

    /**
     * @deprecated Use {@link #findPostTypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PostType instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PostType> searchPostTypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PostTypes list by query filter:{}", (Object) queryFilters);
        return postTypeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PostType instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PostType> findPostTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PostTypes list by filter:", query);
        return postTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PostType instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PostType> filterPostTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PostTypes list by filter", query);
        return postTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPostTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return postTypeService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportPostTypesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = PostType.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> postTypeService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of PostType instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPostTypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PostTypes");
		return postTypeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPostTypeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return postTypeService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/posts")
    @ApiOperation(value = "Gets the posts instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Post> findAssociatedPosts(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated posts");
        return postTypeService.findAssociatedPosts(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PostTypeService instance
	 */
	protected void setPostTypeService(PostTypeService service) {
		this.postTypeService = service;
	}

}