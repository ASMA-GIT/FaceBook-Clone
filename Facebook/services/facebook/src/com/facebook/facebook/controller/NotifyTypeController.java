/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.facebook.facebook.Notification;
import com.facebook.facebook.NotifyType;
import com.facebook.facebook.service.NotifyTypeService;


/**
 * Controller object for domain model class NotifyType.
 * @see NotifyType
 */
@RestController("facebook.NotifyTypeController")
@Api(value = "NotifyTypeController", description = "Exposes APIs to work with NotifyType resource.")
@RequestMapping("/facebook/NotifyType")
public class NotifyTypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(NotifyTypeController.class);

    @Autowired
	@Qualifier("facebook.NotifyTypeService")
	private NotifyTypeService notifyTypeService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new NotifyType instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public NotifyType createNotifyType(@RequestBody NotifyType notifyType) {
		LOGGER.debug("Create NotifyType with information: {}" , notifyType);

		notifyType = notifyTypeService.create(notifyType);
		LOGGER.debug("Created NotifyType with information: {}" , notifyType);

	    return notifyType;
	}

    @ApiOperation(value = "Returns the NotifyType instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public NotifyType getNotifyType(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting NotifyType with id: {}" , id);

        NotifyType foundNotifyType = notifyTypeService.getById(id);
        LOGGER.debug("NotifyType details with id: {}" , foundNotifyType);

        return foundNotifyType;
    }

    @ApiOperation(value = "Updates the NotifyType instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public NotifyType editNotifyType(@PathVariable("id") Integer id, @RequestBody NotifyType notifyType) {
        LOGGER.debug("Editing NotifyType with id: {}" , notifyType.getId());

        notifyType.setId(id);
        notifyType = notifyTypeService.update(notifyType);
        LOGGER.debug("NotifyType details with id: {}" , notifyType);

        return notifyType;
    }
    
    @ApiOperation(value = "Partially updates the NotifyType instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public NotifyType patchNotifyType(@PathVariable("id") Integer id, @RequestBody @MapTo(NotifyType.class) Map<String, Object> notifyTypePatch) {
        LOGGER.debug("Partially updating NotifyType with id: {}" , id);

        NotifyType notifyType = notifyTypeService.partialUpdate(id, notifyTypePatch);
        LOGGER.debug("NotifyType details after partial update: {}" , notifyType);

        return notifyType;
    }

    @ApiOperation(value = "Deletes the NotifyType instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteNotifyType(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting NotifyType with id: {}" , id);

        NotifyType deletedNotifyType = notifyTypeService.delete(id);

        return deletedNotifyType != null;
    }

    @GetMapping(value = "/notiType/{notiType}" )
    @ApiOperation(value = "Returns the matching NotifyType with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public NotifyType getByNotiType(@PathVariable("notiType") String notiType) {
        LOGGER.debug("Getting NotifyType with uniques key NotiType");
        return notifyTypeService.getByNotiType(notiType);
    }

    /**
     * @deprecated Use {@link #findNotifyTypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of NotifyType instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<NotifyType> searchNotifyTypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering NotifyTypes list by query filter:{}", (Object) queryFilters);
        return notifyTypeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of NotifyType instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<NotifyType> findNotifyTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering NotifyTypes list by filter:", query);
        return notifyTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of NotifyType instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<NotifyType> filterNotifyTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering NotifyTypes list by filter", query);
        return notifyTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportNotifyTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return notifyTypeService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportNotifyTypesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = NotifyType.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> notifyTypeService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of NotifyType instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countNotifyTypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting NotifyTypes");
		return notifyTypeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getNotifyTypeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return notifyTypeService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/notifications")
    @ApiOperation(value = "Gets the notifications instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Notification> findAssociatedNotifications(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated notifications");
        return notifyTypeService.findAssociatedNotifications(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service NotifyTypeService instance
	 */
	protected void setNotifyTypeService(NotifyTypeService service) {
		this.notifyTypeService = service;
	}

}