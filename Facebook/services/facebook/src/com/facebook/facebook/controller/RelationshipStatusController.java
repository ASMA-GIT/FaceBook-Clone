/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.facebook.facebook.RelationshipStatus;
import com.facebook.facebook.Users;
import com.facebook.facebook.service.RelationshipStatusService;


/**
 * Controller object for domain model class RelationshipStatus.
 * @see RelationshipStatus
 */
@RestController("facebook.RelationshipStatusController")
@Api(value = "RelationshipStatusController", description = "Exposes APIs to work with RelationshipStatus resource.")
@RequestMapping("/facebook/RelationshipStatus")
public class RelationshipStatusController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RelationshipStatusController.class);

    @Autowired
	@Qualifier("facebook.RelationshipStatusService")
	private RelationshipStatusService relationshipStatusService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new RelationshipStatus instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RelationshipStatus createRelationshipStatus(@RequestBody RelationshipStatus relationshipStatus) {
		LOGGER.debug("Create RelationshipStatus with information: {}" , relationshipStatus);

		relationshipStatus = relationshipStatusService.create(relationshipStatus);
		LOGGER.debug("Created RelationshipStatus with information: {}" , relationshipStatus);

	    return relationshipStatus;
	}

    @ApiOperation(value = "Returns the RelationshipStatus instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RelationshipStatus getRelationshipStatus(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting RelationshipStatus with id: {}" , id);

        RelationshipStatus foundRelationshipStatus = relationshipStatusService.getById(id);
        LOGGER.debug("RelationshipStatus details with id: {}" , foundRelationshipStatus);

        return foundRelationshipStatus;
    }

    @ApiOperation(value = "Updates the RelationshipStatus instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RelationshipStatus editRelationshipStatus(@PathVariable("id") Integer id, @RequestBody RelationshipStatus relationshipStatus) {
        LOGGER.debug("Editing RelationshipStatus with id: {}" , relationshipStatus.getId());

        relationshipStatus.setId(id);
        relationshipStatus = relationshipStatusService.update(relationshipStatus);
        LOGGER.debug("RelationshipStatus details with id: {}" , relationshipStatus);

        return relationshipStatus;
    }
    
    @ApiOperation(value = "Partially updates the RelationshipStatus instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RelationshipStatus patchRelationshipStatus(@PathVariable("id") Integer id, @RequestBody @MapTo(RelationshipStatus.class) Map<String, Object> relationshipStatusPatch) {
        LOGGER.debug("Partially updating RelationshipStatus with id: {}" , id);

        RelationshipStatus relationshipStatus = relationshipStatusService.partialUpdate(id, relationshipStatusPatch);
        LOGGER.debug("RelationshipStatus details after partial update: {}" , relationshipStatus);

        return relationshipStatus;
    }

    @ApiOperation(value = "Deletes the RelationshipStatus instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteRelationshipStatus(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting RelationshipStatus with id: {}" , id);

        RelationshipStatus deletedRelationshipStatus = relationshipStatusService.delete(id);

        return deletedRelationshipStatus != null;
    }

    /**
     * @deprecated Use {@link #findRelationshipStatuses(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of RelationshipStatus instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RelationshipStatus> searchRelationshipStatusesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering RelationshipStatuses list by query filter:{}", (Object) queryFilters);
        return relationshipStatusService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RelationshipStatus instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RelationshipStatus> findRelationshipStatuses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RelationshipStatuses list by filter:", query);
        return relationshipStatusService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RelationshipStatus instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RelationshipStatus> filterRelationshipStatuses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RelationshipStatuses list by filter", query);
        return relationshipStatusService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportRelationshipStatuses(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return relationshipStatusService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportRelationshipStatusesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = RelationshipStatus.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> relationshipStatusService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of RelationshipStatus instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countRelationshipStatuses( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting RelationshipStatuses");
		return relationshipStatusService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getRelationshipStatusAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return relationshipStatusService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/userses")
    @ApiOperation(value = "Gets the userses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Users> findAssociatedUserses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated userses");
        return relationshipStatusService.findAssociatedUserses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RelationshipStatusService instance
	 */
	protected void setRelationshipStatusService(RelationshipStatusService service) {
		this.relationshipStatusService = service;
	}

}