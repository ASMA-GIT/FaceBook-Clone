/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.facebook.facebook.BlockedUsers;
import com.facebook.facebook.service.BlockedUsersService;


/**
 * Controller object for domain model class BlockedUsers.
 * @see BlockedUsers
 */
@RestController("facebook.BlockedUsersController")
@Api(value = "BlockedUsersController", description = "Exposes APIs to work with BlockedUsers resource.")
@RequestMapping("/facebook/BlockedUsers")
public class BlockedUsersController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BlockedUsersController.class);

    @Autowired
	@Qualifier("facebook.BlockedUsersService")
	private BlockedUsersService blockedUsersService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new BlockedUsers instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BlockedUsers createBlockedUsers(@RequestBody BlockedUsers blockedUsers) {
		LOGGER.debug("Create BlockedUsers with information: {}" , blockedUsers);

		blockedUsers = blockedUsersService.create(blockedUsers);
		LOGGER.debug("Created BlockedUsers with information: {}" , blockedUsers);

	    return blockedUsers;
	}

    @ApiOperation(value = "Returns the BlockedUsers instance associated with the given id.")
    @GetMapping(value = "/{blockId:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BlockedUsers getBlockedUsers(@PathVariable("blockId") Integer blockId) {
        LOGGER.debug("Getting BlockedUsers with id: {}" , blockId);

        BlockedUsers foundBlockedUsers = blockedUsersService.getById(blockId);
        LOGGER.debug("BlockedUsers details with id: {}" , foundBlockedUsers);

        return foundBlockedUsers;
    }

    @ApiOperation(value = "Updates the BlockedUsers instance associated with the given id.")
    @PutMapping(value = "/{blockId:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BlockedUsers editBlockedUsers(@PathVariable("blockId") Integer blockId, @RequestBody BlockedUsers blockedUsers) {
        LOGGER.debug("Editing BlockedUsers with id: {}" , blockedUsers.getBlockId());

        blockedUsers.setBlockId(blockId);
        blockedUsers = blockedUsersService.update(blockedUsers);
        LOGGER.debug("BlockedUsers details with id: {}" , blockedUsers);

        return blockedUsers;
    }
    
    @ApiOperation(value = "Partially updates the BlockedUsers instance associated with the given id.")
    @PatchMapping(value = "/{blockId:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BlockedUsers patchBlockedUsers(@PathVariable("blockId") Integer blockId, @RequestBody @MapTo(BlockedUsers.class) Map<String, Object> blockedUsersPatch) {
        LOGGER.debug("Partially updating BlockedUsers with id: {}" , blockId);

        BlockedUsers blockedUsers = blockedUsersService.partialUpdate(blockId, blockedUsersPatch);
        LOGGER.debug("BlockedUsers details after partial update: {}" , blockedUsers);

        return blockedUsers;
    }

    @ApiOperation(value = "Deletes the BlockedUsers instance associated with the given id.")
    @DeleteMapping(value = "/{blockId:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteBlockedUsers(@PathVariable("blockId") Integer blockId) {
        LOGGER.debug("Deleting BlockedUsers with id: {}" , blockId);

        BlockedUsers deletedBlockedUsers = blockedUsersService.delete(blockId);

        return deletedBlockedUsers != null;
    }

    /**
     * @deprecated Use {@link #findBlockedUsers(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of BlockedUsers instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BlockedUsers> searchBlockedUsersByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering BlockedUsers list by query filter:{}", (Object) queryFilters);
        return blockedUsersService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of BlockedUsers instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BlockedUsers> findBlockedUsers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering BlockedUsers list by filter:", query);
        return blockedUsersService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of BlockedUsers instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BlockedUsers> filterBlockedUsers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering BlockedUsers list by filter", query);
        return blockedUsersService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportBlockedUsers(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return blockedUsersService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportBlockedUsersAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = BlockedUsers.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> blockedUsersService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of BlockedUsers instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countBlockedUsers( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting BlockedUsers");
		return blockedUsersService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getBlockedUsersAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return blockedUsersService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BlockedUsersService instance
	 */
	protected void setBlockedUsersService(BlockedUsersService service) {
		this.blockedUsersService = service;
	}

}