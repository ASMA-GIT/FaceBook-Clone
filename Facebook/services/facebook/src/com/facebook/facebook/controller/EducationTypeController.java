/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.facebook.facebook.Education;
import com.facebook.facebook.EducationType;
import com.facebook.facebook.service.EducationTypeService;


/**
 * Controller object for domain model class EducationType.
 * @see EducationType
 */
@RestController("facebook.EducationTypeController")
@Api(value = "EducationTypeController", description = "Exposes APIs to work with EducationType resource.")
@RequestMapping("/facebook/EducationType")
public class EducationTypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EducationTypeController.class);

    @Autowired
	@Qualifier("facebook.EducationTypeService")
	private EducationTypeService educationTypeService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new EducationType instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EducationType createEducationType(@RequestBody EducationType educationType) {
		LOGGER.debug("Create EducationType with information: {}" , educationType);

		educationType = educationTypeService.create(educationType);
		LOGGER.debug("Created EducationType with information: {}" , educationType);

	    return educationType;
	}

    @ApiOperation(value = "Returns the EducationType instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EducationType getEducationType(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting EducationType with id: {}" , id);

        EducationType foundEducationType = educationTypeService.getById(id);
        LOGGER.debug("EducationType details with id: {}" , foundEducationType);

        return foundEducationType;
    }

    @ApiOperation(value = "Updates the EducationType instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EducationType editEducationType(@PathVariable("id") Integer id, @RequestBody EducationType educationType) {
        LOGGER.debug("Editing EducationType with id: {}" , educationType.getId());

        educationType.setId(id);
        educationType = educationTypeService.update(educationType);
        LOGGER.debug("EducationType details with id: {}" , educationType);

        return educationType;
    }
    
    @ApiOperation(value = "Partially updates the EducationType instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EducationType patchEducationType(@PathVariable("id") Integer id, @RequestBody @MapTo(EducationType.class) Map<String, Object> educationTypePatch) {
        LOGGER.debug("Partially updating EducationType with id: {}" , id);

        EducationType educationType = educationTypeService.partialUpdate(id, educationTypePatch);
        LOGGER.debug("EducationType details after partial update: {}" , educationType);

        return educationType;
    }

    @ApiOperation(value = "Deletes the EducationType instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteEducationType(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting EducationType with id: {}" , id);

        EducationType deletedEducationType = educationTypeService.delete(id);

        return deletedEducationType != null;
    }

    /**
     * @deprecated Use {@link #findEducationTypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of EducationType instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EducationType> searchEducationTypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering EducationTypes list by query filter:{}", (Object) queryFilters);
        return educationTypeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EducationType instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EducationType> findEducationTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EducationTypes list by filter:", query);
        return educationTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EducationType instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EducationType> filterEducationTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EducationTypes list by filter", query);
        return educationTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportEducationTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return educationTypeService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportEducationTypesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = EducationType.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> educationTypeService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of EducationType instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countEducationTypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting EducationTypes");
		return educationTypeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getEducationTypeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return educationTypeService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/educations")
    @ApiOperation(value = "Gets the educations instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Education> findAssociatedEducations(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated educations");
        return educationTypeService.findAssociatedEducations(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EducationTypeService instance
	 */
	protected void setEducationTypeService(EducationTypeService service) {
		this.educationTypeService = service;
	}

}