/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.facebook.facebook.Chat;
import com.facebook.facebook.Messages;
import com.facebook.facebook.service.ChatService;


/**
 * Controller object for domain model class Chat.
 * @see Chat
 */
@RestController("facebook.ChatController")
@Api(value = "ChatController", description = "Exposes APIs to work with Chat resource.")
@RequestMapping("/facebook/Chat")
public class ChatController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ChatController.class);

    @Autowired
	@Qualifier("facebook.ChatService")
	private ChatService chatService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Chat instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Chat createChat(@RequestBody Chat chat) {
		LOGGER.debug("Create Chat with information: {}" , chat);

		chat = chatService.create(chat);
		LOGGER.debug("Created Chat with information: {}" , chat);

	    return chat;
	}

    @ApiOperation(value = "Returns the Chat instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Chat getChat(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Chat with id: {}" , id);

        Chat foundChat = chatService.getById(id);
        LOGGER.debug("Chat details with id: {}" , foundChat);

        return foundChat;
    }

    @ApiOperation(value = "Updates the Chat instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Chat editChat(@PathVariable("id") Integer id, @RequestBody Chat chat) {
        LOGGER.debug("Editing Chat with id: {}" , chat.getId());

        chat.setId(id);
        chat = chatService.update(chat);
        LOGGER.debug("Chat details with id: {}" , chat);

        return chat;
    }
    
    @ApiOperation(value = "Partially updates the Chat instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Chat patchChat(@PathVariable("id") Integer id, @RequestBody @MapTo(Chat.class) Map<String, Object> chatPatch) {
        LOGGER.debug("Partially updating Chat with id: {}" , id);

        Chat chat = chatService.partialUpdate(id, chatPatch);
        LOGGER.debug("Chat details after partial update: {}" , chat);

        return chat;
    }

    @ApiOperation(value = "Deletes the Chat instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteChat(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Chat with id: {}" , id);

        Chat deletedChat = chatService.delete(id);

        return deletedChat != null;
    }

    @GetMapping(value = "/user1Id-user2Id" )
    @ApiOperation(value = "Returns the matching Chat with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Chat getByUser1IdAndUser2Id(@RequestParam("user1Id") Integer user1Id, @RequestParam("user2Id") Integer user2Id) {
        LOGGER.debug("Getting Chat with uniques key User1IdAndUser2Id");
        return chatService.getByUser1IdAndUser2Id(user1Id, user2Id);
    }

    /**
     * @deprecated Use {@link #findChats(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Chat instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Chat> searchChatsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Chats list by query filter:{}", (Object) queryFilters);
        return chatService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Chat instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Chat> findChats(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Chats list by filter:", query);
        return chatService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Chat instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Chat> filterChats(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Chats list by filter", query);
        return chatService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportChats(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return chatService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportChatsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Chat.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> chatService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Chat instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countChats( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Chats");
		return chatService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getChatAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return chatService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/messageses")
    @ApiOperation(value = "Gets the messageses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Messages> findAssociatedMessageses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated messageses");
        return chatService.findAssociatedMessageses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ChatService instance
	 */
	protected void setChatService(ChatService service) {
		this.chatService = service;
	}

}