/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.facebook.facebook.Hobbies;
import com.facebook.facebook.service.HobbiesService;


/**
 * Controller object for domain model class Hobbies.
 * @see Hobbies
 */
@RestController("facebook.HobbiesController")
@Api(value = "HobbiesController", description = "Exposes APIs to work with Hobbies resource.")
@RequestMapping("/facebook/Hobbies")
public class HobbiesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(HobbiesController.class);

    @Autowired
	@Qualifier("facebook.HobbiesService")
	private HobbiesService hobbiesService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Hobbies instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Hobbies createHobbies(@RequestBody Hobbies hobbies) {
		LOGGER.debug("Create Hobbies with information: {}" , hobbies);

		hobbies = hobbiesService.create(hobbies);
		LOGGER.debug("Created Hobbies with information: {}" , hobbies);

	    return hobbies;
	}

    @ApiOperation(value = "Returns the Hobbies instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Hobbies getHobbies(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Hobbies with id: {}" , id);

        Hobbies foundHobbies = hobbiesService.getById(id);
        LOGGER.debug("Hobbies details with id: {}" , foundHobbies);

        return foundHobbies;
    }

    @ApiOperation(value = "Updates the Hobbies instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Hobbies editHobbies(@PathVariable("id") Integer id, @RequestBody Hobbies hobbies) {
        LOGGER.debug("Editing Hobbies with id: {}" , hobbies.getId());

        hobbies.setId(id);
        hobbies = hobbiesService.update(hobbies);
        LOGGER.debug("Hobbies details with id: {}" , hobbies);

        return hobbies;
    }
    
    @ApiOperation(value = "Partially updates the Hobbies instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Hobbies patchHobbies(@PathVariable("id") Integer id, @RequestBody @MapTo(Hobbies.class) Map<String, Object> hobbiesPatch) {
        LOGGER.debug("Partially updating Hobbies with id: {}" , id);

        Hobbies hobbies = hobbiesService.partialUpdate(id, hobbiesPatch);
        LOGGER.debug("Hobbies details after partial update: {}" , hobbies);

        return hobbies;
    }

    @ApiOperation(value = "Deletes the Hobbies instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteHobbies(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Hobbies with id: {}" , id);

        Hobbies deletedHobbies = hobbiesService.delete(id);

        return deletedHobbies != null;
    }

    @GetMapping(value = "/userId-hobbieId" )
    @ApiOperation(value = "Returns the matching Hobbies with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Hobbies getByUserIdAndHobbieId(@RequestParam("userId") Integer userId, @RequestParam("hobbieId") Integer hobbieId) {
        LOGGER.debug("Getting Hobbies with uniques key UserIdAndHobbieId");
        return hobbiesService.getByUserIdAndHobbieId(userId, hobbieId);
    }

    /**
     * @deprecated Use {@link #findHobbies(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Hobbies instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Hobbies> searchHobbiesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Hobbies list by query filter:{}", (Object) queryFilters);
        return hobbiesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Hobbies instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Hobbies> findHobbies(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Hobbies list by filter:", query);
        return hobbiesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Hobbies instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Hobbies> filterHobbies(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Hobbies list by filter", query);
        return hobbiesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportHobbies(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return hobbiesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportHobbiesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Hobbies.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> hobbiesService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Hobbies instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countHobbies( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Hobbies");
		return hobbiesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getHobbiesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return hobbiesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service HobbiesService instance
	 */
	protected void setHobbiesService(HobbiesService service) {
		this.hobbiesService = service;
	}

}