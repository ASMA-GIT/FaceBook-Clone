/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.facebook.facebook.Family;
import com.facebook.facebook.Relation;
import com.facebook.facebook.service.RelationService;


/**
 * Controller object for domain model class Relation.
 * @see Relation
 */
@RestController("facebook.RelationController")
@Api(value = "RelationController", description = "Exposes APIs to work with Relation resource.")
@RequestMapping("/facebook/Relation")
public class RelationController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RelationController.class);

    @Autowired
	@Qualifier("facebook.RelationService")
	private RelationService relationService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Relation instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Relation createRelation(@RequestBody Relation relation) {
		LOGGER.debug("Create Relation with information: {}" , relation);

		relation = relationService.create(relation);
		LOGGER.debug("Created Relation with information: {}" , relation);

	    return relation;
	}

    @ApiOperation(value = "Returns the Relation instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Relation getRelation(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Relation with id: {}" , id);

        Relation foundRelation = relationService.getById(id);
        LOGGER.debug("Relation details with id: {}" , foundRelation);

        return foundRelation;
    }

    @ApiOperation(value = "Updates the Relation instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Relation editRelation(@PathVariable("id") Integer id, @RequestBody Relation relation) {
        LOGGER.debug("Editing Relation with id: {}" , relation.getId());

        relation.setId(id);
        relation = relationService.update(relation);
        LOGGER.debug("Relation details with id: {}" , relation);

        return relation;
    }
    
    @ApiOperation(value = "Partially updates the Relation instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Relation patchRelation(@PathVariable("id") Integer id, @RequestBody @MapTo(Relation.class) Map<String, Object> relationPatch) {
        LOGGER.debug("Partially updating Relation with id: {}" , id);

        Relation relation = relationService.partialUpdate(id, relationPatch);
        LOGGER.debug("Relation details after partial update: {}" , relation);

        return relation;
    }

    @ApiOperation(value = "Deletes the Relation instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteRelation(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Relation with id: {}" , id);

        Relation deletedRelation = relationService.delete(id);

        return deletedRelation != null;
    }

    @GetMapping(value = "/relName/{relName}" )
    @ApiOperation(value = "Returns the matching Relation with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Relation getByRelName(@PathVariable("relName") String relName) {
        LOGGER.debug("Getting Relation with uniques key RelName");
        return relationService.getByRelName(relName);
    }

    /**
     * @deprecated Use {@link #findRelations(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Relation instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Relation> searchRelationsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Relations list by query filter:{}", (Object) queryFilters);
        return relationService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Relation instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Relation> findRelations(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Relations list by filter:", query);
        return relationService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Relation instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Relation> filterRelations(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Relations list by filter", query);
        return relationService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportRelations(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return relationService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportRelationsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Relation.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> relationService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Relation instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countRelations( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Relations");
		return relationService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getRelationAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return relationService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/families")
    @ApiOperation(value = "Gets the families instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Family> findAssociatedFamilies(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated families");
        return relationService.findAssociatedFamilies(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RelationService instance
	 */
	protected void setRelationService(RelationService service) {
		this.relationService = service;
	}

}