/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.facebook.facebook.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.facebook.facebook.Comment;
import com.facebook.facebook.LikedPost;
import com.facebook.facebook.Post;
import com.facebook.facebook.SavedPost;
import com.facebook.facebook.service.PostService;


/**
 * Controller object for domain model class Post.
 * @see Post
 */
@RestController("facebook.PostController")
@Api(value = "PostController", description = "Exposes APIs to work with Post resource.")
@RequestMapping("/facebook/Post")
public class PostController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PostController.class);

    @Autowired
	@Qualifier("facebook.PostService")
	private PostService postService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Post instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Post createPost(@RequestBody Post postInstance) {
		LOGGER.debug("Create Post with information: {}" , postInstance);

		postInstance = postService.create(postInstance);
		LOGGER.debug("Created Post with information: {}" , postInstance);

	    return postInstance;
	}

    @ApiOperation(value = "Returns the Post instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Post getPost(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Post with id: {}" , id);

        Post foundPost = postService.getById(id);
        LOGGER.debug("Post details with id: {}" , foundPost);

        return foundPost;
    }

    @ApiOperation(value = "Updates the Post instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Post editPost(@PathVariable("id") Integer id, @RequestBody Post postInstance) {
        LOGGER.debug("Editing Post with id: {}" , postInstance.getId());

        postInstance.setId(id);
        postInstance = postService.update(postInstance);
        LOGGER.debug("Post details with id: {}" , postInstance);

        return postInstance;
    }
    
    @ApiOperation(value = "Partially updates the Post instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Post patchPost(@PathVariable("id") Integer id, @RequestBody @MapTo(Post.class) Map<String, Object> postInstancePatch) {
        LOGGER.debug("Partially updating Post with id: {}" , id);

        Post postInstance = postService.partialUpdate(id, postInstancePatch);
        LOGGER.debug("Post details after partial update: {}" , postInstance);

        return postInstance;
    }

    @ApiOperation(value = "Deletes the Post instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePost(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Post with id: {}" , id);

        Post deletedPost = postService.delete(id);

        return deletedPost != null;
    }

    /**
     * @deprecated Use {@link #findPosts(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Post instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Post> searchPostsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Posts list by query filter:{}", (Object) queryFilters);
        return postService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Post instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Post> findPosts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Posts list by filter:", query);
        return postService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Post instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Post> filterPosts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Posts list by filter", query);
        return postService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPosts(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return postService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportPostsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Post.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> postService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Post instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPosts( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Posts");
		return postService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPostAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return postService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/comments")
    @ApiOperation(value = "Gets the comments instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Comment> findAssociatedComments(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated comments");
        return postService.findAssociatedComments(id, pageable);
    }

    @GetMapping(value="/{id:.+}/likedPosts")
    @ApiOperation(value = "Gets the likedPosts instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LikedPost> findAssociatedLikedPosts(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated likedPosts");
        return postService.findAssociatedLikedPosts(id, pageable);
    }

    @GetMapping(value="/{id:.+}/savedPosts")
    @ApiOperation(value = "Gets the savedPosts instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SavedPost> findAssociatedSavedPosts(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated savedPosts");
        return postService.findAssociatedSavedPosts(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PostService instance
	 */
	protected void setPostService(PostService service) {
		this.postService = service;
	}

}